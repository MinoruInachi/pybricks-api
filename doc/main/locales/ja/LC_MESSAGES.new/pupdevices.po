# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2023 The Pybricks Authors
# This file is distributed under the same license as the pybricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybricks v3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-17 09:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../pupdevices/colordistancesensor.rst:4
msgid "Color and Distance Sensor"
msgstr ""

#: of pybricks.pupdevices.ColorDistanceSensor:1
msgid "LEGO® Powered Up Color and Distance Sensor."
msgstr ""

#: of pybricks._common.AmbientColorSensor.color
#: pybricks._common.AmbientColorSensor.hsv
#: pybricks._common.CommonColorSensor.detectable_colors
#: pybricks._common.Control.limits pybricks._common.Control.pid
#: pybricks._common.Control.stall_tolerances
#: pybricks._common.Control.target_tolerances pybricks._common.DCMotor.dc
#: pybricks._common.DCMotor.settings pybricks._common.ExternalColorLight.on
#: pybricks._common.LightArray3.on pybricks._common.LightArray4.on
#: pybricks._common.Model.settings pybricks._common.Motor.run
#: pybricks._common.Motor.run_angle pybricks._common.Motor.run_target
#: pybricks._common.Motor.run_time pybricks._common.Motor.run_until_stalled
#: pybricks._common.Motor.speed pybricks._common.Motor.track_target
#: pybricks.pupdevices.ColorDistanceSensor pybricks.pupdevices.ColorLightMatrix
#: pybricks.pupdevices.ColorLightMatrix.on pybricks.pupdevices.ColorSensor
#: pybricks.pupdevices.DCMotor pybricks.pupdevices.ForceSensor
#: pybricks.pupdevices.ForceSensor.pressed pybricks.pupdevices.InfraredSensor
#: pybricks.pupdevices.Light pybricks.pupdevices.Light.on
#: pybricks.pupdevices.Motor pybricks.pupdevices.Motor.reset_angle
#: pybricks.pupdevices.PFMotor pybricks.pupdevices.PFMotor.dc
#: pybricks.pupdevices.Remote pybricks.pupdevices.Remote.name
#: pybricks.pupdevices.TiltSensor pybricks.pupdevices.UltrasonicSensor
msgid "Parameters"
msgstr ""

#: of pybricks.pupdevices.ColorDistanceSensor:3
#: pybricks.pupdevices.ColorSensor:3 pybricks.pupdevices.ForceSensor:3
#: pybricks.pupdevices.InfraredSensor:3 pybricks.pupdevices.TiltSensor:3
#: pybricks.pupdevices.UltrasonicSensor:3
msgid "Port to which the sensor is connected."
msgstr ""

#: of pybricks._common.CommonColorSensor.color:1
#: pybricks._common.CommonColorSensor.hsv:1
msgid "Scans the color of a surface."
msgstr ""

#: of pybricks._common.AmbientColorSensor.color:3
#: pybricks._common.CommonColorSensor.color:3
msgid ""
"You choose which colors are detected using the ``detectable_colors()`` "
"method. By default, it detects ``Color.RED``, ``Color.YELLOW``, "
"``Color.GREEN``, ``Color.BLUE``, ``Color.WHITE``, or ``Color.NONE``."
msgstr ""

#: of pybricks._common.AmbientColorSensor.color
#: pybricks._common.AmbientColorSensor.hsv
#: pybricks._common.CommonColorSensor.ambient
#: pybricks._common.CommonColorSensor.color
#: pybricks._common.CommonColorSensor.hsv
#: pybricks._common.CommonColorSensor.reflection
#: pybricks._common.Keypad.pressed pybricks._common.Model.state
#: pybricks._common.Motor.angle pybricks._common.Motor.done
#: pybricks._common.Motor.load pybricks._common.Motor.run_until_stalled
#: pybricks._common.Motor.speed pybricks._common.Motor.stalled
#: pybricks.pupdevices.ColorDistanceSensor.distance
#: pybricks.pupdevices.ForceSensor.distance
#: pybricks.pupdevices.ForceSensor.force
#: pybricks.pupdevices.ForceSensor.pressed
#: pybricks.pupdevices.ForceSensor.touched
#: pybricks.pupdevices.InfraredSensor.count
#: pybricks.pupdevices.InfraredSensor.distance
#: pybricks.pupdevices.InfraredSensor.reflection
#: pybricks.pupdevices.TiltSensor.tilt
#: pybricks.pupdevices.UltrasonicSensor.distance
#: pybricks.pupdevices.UltrasonicSensor.presence
msgid "Returns"
msgstr ""

#: of pybricks._common.CommonColorSensor.color:8
msgid "Detected color."
msgstr ""

#: of pybricks._common.CommonColorSensor.reflection:1
msgid "Measures how much a surface reflects the light emitted by the sensor."
msgstr ""

#: of pybricks._common.CommonColorSensor.reflection:4
#: pybricks.pupdevices.InfraredSensor.reflection:3
msgid ""
"Measured reflection, ranging from 0% (no reflection) to 100% (high "
"reflection)."
msgstr ""

#: of pybricks._common.CommonColorSensor.ambient:1
msgid "Measures the ambient light intensity."
msgstr ""

#: of pybricks._common.CommonColorSensor.ambient:3
msgid "Ambient light intensity, ranging from 0% (dark) to 100% (bright)."
msgstr ""

#: of pybricks.pupdevices.ColorDistanceSensor.distance:1
#: pybricks.pupdevices.InfraredSensor.distance:1
msgid ""
"Measures the relative distance between the sensor and an object using "
"infrared light."
msgstr ""

#: of pybricks.pupdevices.ColorDistanceSensor.distance:4
#: pybricks.pupdevices.InfraredSensor.distance:4
msgid "Distance ranging from 0% (closest) to 100% (farthest)."
msgstr ""

#: of pybricks._common.AmbientColorSensor.hsv:3
#: pybricks._common.CommonColorSensor.hsv:3
msgid ""
"This method is similar to ``color()``, but it gives the full range of "
"hue, saturation and brightness values, instead of rounding it to the "
"nearest detectable color."
msgstr ""

#: of pybricks._common.AmbientColorSensor.hsv:12
#: pybricks._common.CommonColorSensor.hsv:7
msgid ""
"Measured color. The color is described by a hue (0--359), a saturation (0"
"--100), and a brightness value (0--100)."
msgstr ""

#: of pybricks._common.CommonColorSensor.detectable_colors:1
msgid "Configures which colors the ``color()`` method should detect."
msgstr ""

#: of pybricks._common.CommonColorSensor.detectable_colors:3
msgid ""
"Specify only colors that you wish to detect in your application. This "
"way, the full-color measurements are rounded to the nearest desired "
"color, and other colors are ignored. This improves reliability."
msgstr ""

#: of pybricks._common.CommonColorSensor.detectable_colors:7
msgid "If you give no arguments, the currently chosen colors will be returned."
msgstr ""

#: of pybricks._common.CommonColorSensor.detectable_colors:9
msgid ""
"List of :class:`Color <.parameters.Color>` objects: the colors that you "
"want to detect. You can pick standard colors such as ``Color.MAGENTA``, "
"or provide your own colors like ``Color(h=348, s=96, v=40)`` for even "
"better results. You measure your own colors with the ``hsv()`` method."
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:25
msgid "Built-in light"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:26
msgid ""
"This sensor has a built-in light. You can make it red, green, blue, or "
"turn it off. If you use the sensor to measure something afterwards, the "
"light automatically turns back on at the default color for that sensing "
"method."
msgstr ""

#: of pybricks._common.ExternalColorLight.on:1
msgid "Turns on the light at the specified color."
msgstr ""

#: of pybricks._common.ExternalColorLight.on:3
msgid "Color of the light."
msgstr ""

#: of pybricks._common.ExternalColorLight.off:1 pybricks.pupdevices.Light.off:1
msgid "Turns off the light."
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:35
#: ../../pupdevices/colorsensor.rst:36 ../../pupdevices/dcmotor.rst:32
#: ../../pupdevices/forcesensor.rst:21 ../../pupdevices/infraredsensor.rst:19
#: ../../pupdevices/light.rst:17 ../../pupdevices/pfmotor.rst:35
#: ../../pupdevices/remote.rst:21 ../../pupdevices/tiltsensor.rst:15
#: ../../pupdevices/ultrasonicsensor.rst:26
msgid "Examples"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:38
msgid "Measuring color"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:45
#: ../../pupdevices/colorsensor.rst:46
msgid "Waiting for a color"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:51
msgid "Measuring distance and blinking the light"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:57
msgid "Reading hue, saturation, value"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:63
#: ../../pupdevices/colorsensor.rst:60
msgid "Changing the detectable colors"
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:65
#: ../../pupdevices/colorsensor.rst:62
msgid ""
"By default, the sensor is configured to detect red, yellow, green, blue, "
"white, or no color, which suits many applications."
msgstr ""

#: ../../pupdevices/colordistancesensor.rst:68
#: ../../pupdevices/colorsensor.rst:65
msgid ""
"For better results in your application, you can measure your desired "
"colors in advance, and tell the sensor to look only for those colors. Be "
"sure to measure them at the **same distance and light conditions** as in "
"your final application. Then you'll get very accurate results even for "
"colors that are otherwise hard to detect."
msgstr ""

#: ../../pupdevices/colorlightmatrix.rst:4
msgid "Color Light Matrix"
msgstr ""

#: of pybricks.pupdevices.ColorLightMatrix:1
msgid "LEGO® SPIKE 3x3 Color Light Matrix."
msgstr ""

#: of pybricks.pupdevices.ColorLightMatrix:3 pybricks.pupdevices.Light:3
msgid "Port to which the device is connected."
msgstr ""

#: of pybricks.pupdevices.ColorLightMatrix.on:1
msgid "Turns the lights on."
msgstr ""

#: of pybricks.pupdevices.ColorLightMatrix.on:3
msgid ""
"If a single :class:`.Color` is given, then all 9 lights are set to that "
"color. If a list of colors is given, then each light is set to that "
"color."
msgstr ""

#: of pybricks.pupdevices.ColorLightMatrix.off:1
msgid "Turns all lights off."
msgstr ""

#: ../../pupdevices/colorsensor.rst:4
msgid "Color Sensor"
msgstr ""

#: of pybricks.pupdevices.ColorSensor:1 pybricks.pupdevices.UltrasonicSensor:1
msgid "LEGO® SPIKE Color Sensor."
msgstr ""

#: of pybricks._common.AmbientColorSensor.color:1
#: pybricks._common.AmbientColorSensor.hsv:1
msgid "Scans the color of a surface or an external light source."
msgstr ""

#: of pybricks._common.AmbientColorSensor.color:8
#: pybricks._common.AmbientColorSensor.hsv:7
msgid ""
"Choose ``true`` to scan the color of objects and surfaces. Choose "
"``false`` to scan the color of screens and other external light sources."
msgstr ""

#: of pybricks._common.AmbientColorSensor.color:13
msgid "Detected color.`"
msgstr ""

#: ../../pupdevices/colorsensor.rst:19
msgid "Advanced color sensing"
msgstr ""

#: ../../pupdevices/colorsensor.rst:25 ../../pupdevices/ultrasonicsensor.rst:17
msgid "Built-in lights"
msgstr ""

#: ../../pupdevices/colorsensor.rst:26
msgid ""
"This sensor has 3 built-in lights. You can adjust the brightness of each "
"light. If you use the sensor to measure something, the lights will be "
"turned on or off as needed for the measurement."
msgstr ""

#: of pybricks._common.LightArray3.on:1 pybricks._common.LightArray4.on:1
msgid "Turns on the lights at the specified brightness."
msgstr ""

#: of pybricks._common.LightArray3.on:3
msgid ""
"Use a single value to set the brightness of all lights at the same time. "
"Use a tuple of three values to set the brightness of each light "
"individually."
msgstr ""

#: of pybricks._common.LightArray3.off:1
msgid "Turns off all the lights."
msgstr ""

#: ../../pupdevices/colorsensor.rst:39
msgid "Measuring color and reflection"
msgstr ""

#: ../../pupdevices/colorsensor.rst:53
msgid "Reading *reflected* hue, saturation, and value"
msgstr ""

#: ../../pupdevices/colorsensor.rst:75
msgid "Reading *ambient* hue, saturation, value, and color"
msgstr ""

#: ../../pupdevices/colorsensor.rst:81
msgid "Blinking the built-in lights"
msgstr ""

#: ../../pupdevices/colorsensor.rst:87
msgid "Turning off the lights when the program ends"
msgstr ""

#: ../../pupdevices/dcmotor.rst:4
msgid "Motors without rotation sensors"
msgstr ""

#: ../../pupdevices/dcmotor.rst:13 ../../pupdevices/motor.rst:12
msgid "pupmotors"
msgstr ""

#: ../../pupdevices/dcmotor.rst:13
msgid ""
"Powered Up motors without rotation sensors. The arrows indicate the "
"default positive direction."
msgstr ""

#: of pybricks.pupdevices.DCMotor:1
msgid "LEGO® Powered Up motor without rotation sensors."
msgstr ""

#: of pybricks.pupdevices.DCMotor:3 pybricks.pupdevices.Motor:3
msgid "Port to which the motor is connected."
msgstr ""

#: of pybricks.pupdevices.DCMotor:5 pybricks.pupdevices.PFMotor:12
msgid ""
"Which direction the motor should turn when you give a positive duty cycle"
" value."
msgstr ""

#: of pybricks._common.DCMotor.dc:1 pybricks.pupdevices.PFMotor.dc:1
msgid "Rotates the motor at a given duty cycle (also known as \"power\")."
msgstr ""

#: of pybricks._common.DCMotor.dc:3 pybricks.pupdevices.PFMotor.dc:3
msgid "The duty cycle (-100.0 to 100)."
msgstr ""

#: of pybricks._common.DCMotor.stop:1 pybricks.pupdevices.PFMotor.stop:1
msgid "Stops the motor and lets it spin freely."
msgstr ""

#: of pybricks._common.DCMotor.stop:3 pybricks.pupdevices.PFMotor.stop:3
msgid "The motor gradually stops due to friction."
msgstr ""

#: of pybricks._common.DCMotor.brake:1 pybricks.pupdevices.PFMotor.brake:1
msgid "Passively brakes the motor."
msgstr ""

#: of pybricks._common.DCMotor.brake:3 pybricks.pupdevices.PFMotor.brake:3
msgid ""
"The motor stops due to friction, plus the voltage that is generated while"
" the motor is still moving."
msgstr ""

#: of pybricks._common.DCMotor.settings:1
msgid ""
"Configures motor settings. If no arguments are given, this returns the "
"current values."
msgstr ""

#: of pybricks._common.DCMotor.settings:4
msgid "Maximum voltage applied to the motor during all motor commands."
msgstr ""

#: ../../pupdevices/dcmotor.rst:35
msgid "Making a train drive forever"
msgstr ""

#: ../../pupdevices/dcmotor.rst:41 ../../pupdevices/motor.rst:110
msgid "Making the motor move back and forth"
msgstr ""

#: ../../pupdevices/dcmotor.rst:47
msgid "Changing the positive direction"
msgstr ""

#: ../../pupdevices/dcmotor.rst:53
msgid "Starting and stopping"
msgstr ""

#: ../../pupdevices/forcesensor.rst:4
msgid "Force Sensor"
msgstr ""

#: of pybricks.pupdevices.ForceSensor:1
msgid "LEGO® SPIKE Force Sensor."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.force:1
msgid "Measures the force exerted on the sensor."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.force:3
msgid "Measured force (up to approximately 10.00 N)."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.distance:1
msgid "Measures by how much the sensor button has moved."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.distance:3
msgid "Movement up to approximately 8.00 mm."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.pressed:1
msgid "Checks if the sensor button is pressed."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.pressed:3
msgid "Minimum force to be considered pressed."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.pressed:6
msgid "``True`` if the sensor is pressed, ``False`` if it is not."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.touched:1
msgid "Checks if the sensor is touched."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.touched:3
msgid ""
"This is similar to :meth:`pressed`, but it detects slight movements of "
"the button even when the measured force is still considered zero."
msgstr ""

#: of pybricks.pupdevices.ForceSensor.touched:6
msgid "``True`` if the sensor is touched or pressed, ``False`` if it is not."
msgstr ""

#: ../../pupdevices/forcesensor.rst:24
msgid "Measuring force and movement"
msgstr ""

#: ../../pupdevices/forcesensor.rst:30
msgid "Measuring peak force"
msgstr ""

#: ../../pupdevices/index.rst:4
msgid ":mod:`pupdevices <pybricks.pupdevices>` -- Motors, sensors, lights"
msgstr ""

#: of pybricks.pupdevices:1
msgid "LEGO® Powered Up motor, sensors, and lights."
msgstr ""

#: ../../pupdevices/infraredsensor.rst:4
msgid "Infrared Sensor"
msgstr ""

#: of pybricks.pupdevices.InfraredSensor:1
msgid "LEGO® Powered Up Infrared Sensor."
msgstr ""

#: of pybricks.pupdevices.InfraredSensor.reflection:1
msgid "Measures the reflection of a surface using an infrared light."
msgstr ""

#: of pybricks.pupdevices.InfraredSensor.count:1
msgid "Counts the number of objects that have passed by the sensor."
msgstr ""

#: of pybricks.pupdevices.InfraredSensor.count:3
msgid "Number of objects counted."
msgstr ""

#: ../../pupdevices/infraredsensor.rst:22
msgid "Measuring distance, object count, and reflection"
msgstr ""

#: ../../pupdevices/light.rst:4
msgid "Light"
msgstr ""

#: of pybricks.pupdevices.Light:1
msgid "LEGO® Powered Up Light."
msgstr ""

#: of pybricks.pupdevices.Light.on:1
msgid "Turns on the light at the specified brightness."
msgstr ""

#: of pybricks.pupdevices.Light.on:3
msgid "Brightness of the light."
msgstr ""

#: ../../pupdevices/light.rst:20
msgid "Making the light blink"
msgstr ""

#: ../../pupdevices/light.rst:26
msgid "Gradually change the brightness"
msgstr ""

#: ../../pupdevices/motor.rst:4
msgid "Motors with rotation sensors"
msgstr ""

#: ../../pupdevices/motor.rst:12
msgid ""
"Powered Up motors with rotation sensors. The arrows indicate the default "
"positive direction. See the :mod:`hubs <pybricks.hubs>` module for "
"default directions of built-in motors."
msgstr ""

#: of pybricks.pupdevices.Motor:1
msgid "LEGO® Powered Up motor with rotation sensors."
msgstr ""

#: of pybricks.pupdevices.Motor:5
msgid ""
"Which direction the motor should turn when you give a positive speed "
"value or angle."
msgstr ""

#: of pybricks.pupdevices.Motor:9
msgid ""
"List of gears linked to the motor.  For example: ``[12, 36]`` represents "
"a gear train with a 12-tooth and a 36-tooth gear. Use a list of lists for"
" multiple gear trains, such as ``[[12, 36], [20, 16, 40]]``.  When you "
"specify a gear train, all motor commands and settings are automatically "
"adjusted to account for the resulting gear ratio.  The motor direction "
"remains unchanged by this."
msgstr ""

#: of pybricks.pupdevices.Motor:9
msgid "List of gears linked to the motor."
msgstr ""

#: of pybricks.pupdevices.Motor:11
msgid ""
"For example: ``[12, 36]`` represents a gear train with a 12-tooth and a "
"36-tooth gear. Use a list of lists for multiple gear trains, such as "
"``[[12, 36], [20, 16, 40]]``."
msgstr ""

#: of pybricks.pupdevices.Motor:15
msgid ""
"When you specify a gear train, all motor commands and settings are "
"automatically adjusted to account for the resulting gear ratio.  The "
"motor direction remains unchanged by this."
msgstr ""

#: of pybricks.pupdevices.Motor:19
msgid ""
"Choose ``True`` to reset the rotation sensor value to the absolute marker"
" angle (between -180 and 179). Choose ``False`` to keep the current "
"value, so your program knows where it left off last time."
msgstr ""

#: of pybricks.pupdevices.Motor:25
msgid ""
"Precision profile. This is the approximate position tolerance in degrees "
"that is acceptable in your application. A lower value gives more precise "
"but more erratic movement; a higher value gives less precise but smoother"
" movement. If no value is given, a suitable profile for this motor type "
"will be selected automatically (about 11 degrees)."
msgstr ""

#: ../../pupdevices/motor.rst:20
msgid "Measuring"
msgstr ""

#: of pybricks._common.Motor.angle:1
msgid "Gets the rotation angle of the motor."
msgstr ""

#: of pybricks._common.Motor.angle:3
msgid "Motor angle."
msgstr ""

#: of pybricks.pupdevices.Motor.reset_angle:1
msgid "Sets the accumulated rotation angle of the motor to a desired value."
msgstr ""

#: of pybricks.pupdevices.Motor.reset_angle:3
msgid ""
"If you don't specify an angle, the absolute angle will be used if your "
"motor supports it."
msgstr ""

#: of pybricks.pupdevices.Motor.reset_angle:6
msgid "Value to which the angle should be reset."
msgstr ""

#: of pybricks._common.Motor.speed:1
msgid "Gets the speed of the motor."
msgstr ""

#: of pybricks._common.Motor.speed:3
msgid ""
"The speed is measured as the change in the motor angle during the given "
"time window. A short window makes the speed value more responsive to "
"motor movement, but less steady. A long window makes the speed value less"
" responsive, but more steady."
msgstr ""

#: of pybricks._common.Motor.speed:8
msgid "The time window used to determine the speed."
msgstr ""

#: of pybricks._common.Motor.speed:11
msgid "Motor speed."
msgstr ""

#: of pybricks._common.Motor.load:1
msgid "Estimates the load that holds back the motor when it tries to move."
msgstr ""

#: of pybricks._common.Motor.load:3
msgid "The load torque."
msgstr ""

#: of pybricks._common.Motor.stalled:1
msgid "Checks if the motor is currently stalled."
msgstr ""

#: of pybricks._common.Motor.stalled:3
msgid ""
"It is stalled when it cannot reach the target speed or position, even "
"with the maximum actuation signal."
msgstr ""

#: of pybricks._common.Motor.stalled:6
msgid "``True`` if the motor is stalled, ``False`` if not."
msgstr ""

#: ../../pupdevices/motor.rst:32
msgid "Stopping"
msgstr ""

#: of pybricks._common.Motor.hold:1
msgid "Stops the motor and actively holds it at its current angle."
msgstr ""

#: ../../pupdevices/motor.rst:40
msgid "Running forever"
msgstr ""

#: of pybricks._common.Motor.run:1
msgid "Runs the motor at a constant speed."
msgstr ""

#: of pybricks._common.Motor.run:3
msgid ""
"The motor accelerates to the given speed and keeps running at this speed "
"until you give a new command."
msgstr ""

#: of pybricks._common.Motor.run:6 pybricks._common.Motor.run_angle:3
#: pybricks._common.Motor.run_target:6 pybricks._common.Motor.run_time:7
#: pybricks._common.Motor.run_until_stalled:3
msgid "Speed of the motor."
msgstr ""

#: ../../pupdevices/motor.rst:46
msgid "Running by a fixed amount"
msgstr ""

#: of pybricks._common.Motor.run_time:1
msgid "Runs the motor at a constant speed for a given amount of time."
msgstr ""

#: of pybricks._common.Motor.run_time:3
msgid ""
"The motor accelerates to the given speed, keeps running at this speed, "
"and then decelerates. The total maneuver lasts for exactly the given "
"amount of ``time``."
msgstr ""

#: of pybricks._common.Motor.run_time:9
msgid "Duration of the maneuver."
msgstr ""

#: of pybricks._common.Motor.run_angle:8 pybricks._common.Motor.run_target:10
#: pybricks._common.Motor.run_time:11
#: pybricks._common.Motor.run_until_stalled:5
msgid "What to do after coming to a standstill."
msgstr ""

#: of pybricks._common.Motor.run_angle:10 pybricks._common.Motor.run_time:13
msgid ""
"Wait for the maneuver to complete before continuing with the rest of the "
"program."
msgstr ""

#: of pybricks._common.Motor.run_angle:1
msgid "Runs the motor at a constant speed by a given angle."
msgstr ""

#: of pybricks._common.Motor.run_angle:5
msgid "Angle by which the motor should rotate."
msgstr ""

#: of pybricks._common.Motor.run_target:1
msgid "Runs the motor at a constant speed towards a given target angle."
msgstr ""

#: of pybricks._common.Motor.run_target:3
msgid ""
"The direction of rotation is automatically selected based on the target "
"angle. It does not matter if ``speed`` is positive or negative."
msgstr ""

#: of pybricks._common.Motor.run_target:8
msgid "Angle that the motor should rotate to."
msgstr ""

#: of pybricks._common.Motor.run_target:12
msgid ""
"Wait for the motor to reach the target before continuing with the rest of"
" the program."
msgstr ""

#: of pybricks._common.Motor.track_target:1
msgid ""
"Tracks a target angle. This is similar to :meth:`.run_target`, but the "
"usual smooth acceleration is skipped: it will move to the target angle as"
" fast as possible. This method is useful if you want to continuously "
"change the target angle."
msgstr ""

#: of pybricks._common.Motor.track_target:6
msgid "Target angle that the motor should rotate to."
msgstr ""

#: of pybricks._common.Motor.run_until_stalled:1
msgid "Runs the motor at a constant speed until it stalls."
msgstr ""

#: of pybricks._common.Motor.run_until_stalled:7
msgid ""
"Duty cycle limit during this command. This is useful to avoid applying "
"the full motor torque to a geared or lever mechanism. If it is ``None``, "
"the duty limit won't be changed during this command."
msgstr ""

#: of pybricks._common.Motor.run_until_stalled:13
msgid "Angle at which the motor becomes stalled."
msgstr ""

#: of pybricks._common.Motor.done:1
msgid "Checks if an ongoing command or maneuver is done."
msgstr ""

#: of pybricks._common.Motor.done:3
msgid "``True`` if the command is done, ``False`` if not."
msgstr ""

#: ../../pupdevices/motor.rst:62
msgid "Motor settings"
msgstr ""

#: of pybricks._common.Motor.close:1
msgid ""
"Closes the motor object so you can call ``Motor`` again to initialize a "
"new object."
msgstr ""

#: of pybricks._common.Motor.close:4
msgid ""
"This allows advanced users to change properties such as gearing in the "
"middle of the program, which can be useful for removeable attachments."
msgstr ""

#: ../../pupdevices/motor.rst:68
msgid "Control settings"
msgstr ""

#: of pybricks._common.Control.limits:1
msgid "Configures the maximum speed, acceleration, and torque."
msgstr ""

#: of pybricks._common.Control.limits:3 pybricks._common.Control.pid:3
#: pybricks._common.Control.stall_tolerances:3
#: pybricks._common.Control.target_tolerances:3
msgid "If no arguments are given, this will return the current values."
msgstr ""

#: of pybricks._common.Control.limits:5
msgid ""
"The new ``acceleration`` and ``speed`` limit will become effective when "
"you give a new motor command. Ongoing maneuvers are not affected."
msgstr ""

#: of pybricks._common.Control.limits:8
msgid "Maximum speed. All speed commands will be capped to this value."
msgstr ""

#: of pybricks._common.Control.limits:10
msgid ""
"Slope of the speed curve when accelerating or decelerating. Use a tuple "
"to set acceleration and deceleration separately. If one value is given, "
"it is used for both."
msgstr ""

#: of pybricks._common.Control.limits:14
msgid "Maximum feedback torque during control."
msgstr ""

#: of pybricks._common.Control.pid:1
msgid "Gets or sets the PID values for position and speed control."
msgstr ""

#: of pybricks._common.Control.pid:5
msgid ""
"Proportional position control constant. It is the feedback torque per "
"degree of error: µNm/deg."
msgstr ""

#: of pybricks._common.Control.pid:9
msgid ""
"Integral position control constant. It is the feedback torque per "
"accumulated degree of error: µNm/(deg s)."
msgstr ""

#: of pybricks._common.Control.pid:12
msgid ""
"Derivative position (or proportional speed) control constant. It is the "
"feedback torque per unit of speed: µNm/(deg/s)."
msgstr ""

#: of pybricks._common.Control.pid:16
msgid ""
"Zone around the target where the error integral does not accumulate "
"errors."
msgstr ""

#: of pybricks._common.Control.pid:19
msgid "Maximum rate at which the error integral is allowed to grow."
msgstr ""

#: of pybricks._common.Control.target_tolerances:1
msgid "Gets or sets the tolerances that say when a maneuver is done."
msgstr ""

#: of pybricks._common.Control.target_tolerances:5
msgid "Allowed deviation from zero speed before motion is considered complete."
msgstr ""

#: of pybricks._common.Control.target_tolerances:8
msgid "Allowed deviation from the target before motion is considered complete."
msgstr ""

#: of pybricks._common.Control.stall_tolerances:1
msgid "Gets or sets stalling tolerances."
msgstr ""

#: of pybricks._common.Control.stall_tolerances:5
msgid ""
"If the controller cannot reach this speed for some ``time`` even with "
"maximum actuation, it is stalled."
msgstr ""

#: of pybricks._common.Control.stall_tolerances:9
msgid ""
"How long the controller has to be below this minimum ``speed`` before we "
"say it is stalled."
msgstr ""

#: ../../pupdevices/motor.rst:89
msgid ""
"Number of degrees that the motor turns to complete one degree at the "
"output of the gear train. This is the gear ratio determined from the "
"``gears`` argument when initializing the motor."
msgstr ""

#: ../../pupdevices/motor.rst:95
msgid ""
"The :meth:`done`, :meth:`stalled` and :meth:`load` methods have been "
"moved."
msgstr ""

#: of pybricks._common.Model.state:1
msgid ""
"Gets the estimated angle, speed, current, and stall state of the motor, "
"using a simulation model that mimics the real motor. These estimates are "
"updated faster than the real measurements, which can be useful when "
"building your own PID controllers."
msgstr ""

#: of pybricks._common.Model.state:6
msgid ""
"For most applications it is better to used the *measured* :meth:`angle "
"<pybricks.pupdevices.Motor.angle>`, :meth:`speed "
"<pybricks.pupdevices.Motor.speed>`, :meth:`load "
"<pybricks.pupdevices.Motor.load>`, and :meth:`stall "
"<pybricks.pupdevices.Motor.stalled>` state instead."
msgstr ""

#: of pybricks._common.Model.state:12
msgid ""
"Tuple with the estimated angle (deg), speed (deg/s), current (mA), and "
"stall state (``True`` or ``False``)."
msgstr ""

#: of pybricks._common.Model.settings:1
msgid ""
"Gets or sets model settings as a tuple of integers. If no arguments are "
"given, this will return the current values. This method is mainly used to"
" debug the motor model class. Changing these settings should not be "
"needed in user programs."
msgstr ""

#: of pybricks._common.Model.settings:8
msgid "Tuple with `model settings`_."
msgstr ""

#: ../../pupdevices/motor.rst:107
msgid "Initialization examples"
msgstr ""

#: ../../pupdevices/motor.rst:116
msgid "Initializing multiple motors"
msgstr ""

#: ../../pupdevices/motor.rst:122
msgid "Setting the positive direction as counterclockwise"
msgstr ""

#: ../../pupdevices/motor.rst:128
msgid "Using gears"
msgstr ""

#: ../../pupdevices/motor.rst:134
msgid "Measurement examples"
msgstr ""

#: ../../pupdevices/motor.rst:137
msgid "Measuring the angle and speed"
msgstr ""

#: ../../pupdevices/motor.rst:143
msgid "Resetting the measured angle"
msgstr ""

#: ../../pupdevices/motor.rst:149
msgid "Getting the absolute angle"
msgstr ""

#: ../../pupdevices/motor.rst:156
msgid "Movement examples"
msgstr ""

#: ../../pupdevices/motor.rst:159
msgid "Basic usage of all run methods"
msgstr ""

#: ../../pupdevices/motor.rst:165
msgid "Stopping ongoing movements in different ways"
msgstr ""

#: ../../pupdevices/motor.rst:171
msgid "Using the ``then`` argument to change how a run command stops"
msgstr ""

#: ../../pupdevices/motor.rst:177
msgid "Stall examples"
msgstr ""

#: ../../pupdevices/motor.rst:180
msgid "Running a motor until a mechanical endpoint"
msgstr ""

#: ../../pupdevices/motor.rst:186
msgid "Centering a steering mechanism"
msgstr ""

#: ../../pupdevices/motor.rst:193
msgid "Parallel movement examples"
msgstr ""

#: ../../pupdevices/motor.rst:196
msgid "Using the ``wait`` argument to run motors in parallel"
msgstr ""

#: ../../pupdevices/motor.rst:202
msgid "Waiting for two parallel actions to complete"
msgstr ""

#: ../../pupdevices/pfmotor.rst:4
msgid "Power Functions"
msgstr ""

#: ../../pupdevices/pfmotor.rst:6
msgid ""
"The :class:`ColorDistanceSensor "
"<pybricks.pupdevices.ColorDistanceSensor>` can send infrared signals to "
"control Power Functions infrared receivers. You can use this technique to"
" control medium, large, extra large, and train motors. The infrared range"
" is limited to about 30 cm, depending on the angle and ambient "
"conditions."
msgstr ""

#: ../../pupdevices/pfmotor.rst:15
msgid ""
"Powered Up :class:`ColorDistanceSensor "
"<pybricks.pupdevices.ColorDistanceSensor>` (left), Power Functions "
"infrared receiver (middle), and a Power Functions motor (right). Here, "
"the receiver uses channel 1 with a motor on the red port."
msgstr ""

#: of pybricks.pupdevices.PFMotor:1
msgid ""
"Control Power Functions motors with the infrared functionality of the "
":class:`ColorDistanceSensor <pybricks.pupdevices.ColorDistanceSensor>`."
msgstr ""

#: of pybricks.pupdevices.PFMotor:4
msgid "Sensor object."
msgstr ""

#: of pybricks.pupdevices.PFMotor:6
msgid "Channel number of the receiver: ``1``, ``2``, ``3``, or ``4``."
msgstr ""

#: of pybricks.pupdevices.PFMotor:8
msgid ""
"Color marker on the receiver: :class:`Color.BLUE <.parameters.Color>` or "
":class:`Color.RED <.parameters.Color>`"
msgstr ""

#: ../../pupdevices/pfmotor.rst:38
msgid "Control a Power Functions motor"
msgstr ""

#: ../../pupdevices/pfmotor.rst:44
msgid "Controlling multiple Power Functions motors"
msgstr ""

#: ../../pupdevices/remote.rst:4
msgid "Remote Control"
msgstr ""

#: of pybricks.pupdevices.Remote:1
msgid "LEGO® Powered Up Bluetooth Remote Control."
msgstr ""

#: of pybricks.pupdevices.Remote:3
msgid ""
"When you instantiate this class, the hub will search for a remote and "
"connect automatically."
msgstr ""

#: of pybricks.pupdevices.Remote:6
msgid ""
"The remote must be on and ready for a connection, as indicated by a white"
" blinking light."
msgstr ""

#: of pybricks.pupdevices.Remote:9
msgid ""
"Bluetooth name of the remote. If no name is given, the hub connects to "
"the first remote that it finds."
msgstr ""

#: of pybricks.pupdevices.Remote:12
msgid "How long to search for the remote."
msgstr ""

#: of pybricks.pupdevices.Remote.name:1
msgid "Sets or gets the Bluetooth name of the remote."
msgstr ""

#: of pybricks.pupdevices.Remote.name:3
msgid ""
"New Bluetooth name of the remote. If no name is given, this method "
"returns the current name."
msgstr ""

#: of pybricks._common.Keypad.pressed:1
msgid "Checks which buttons are currently pressed."
msgstr ""

#: of pybricks._common.Keypad.pressed:3
msgid "Set of pressed buttons."
msgstr ""

#: ../../pupdevices/remote.rst:24
msgid "Checking which buttons are pressed"
msgstr ""

#: ../../pupdevices/remote.rst:30
msgid "Changing the remote light color"
msgstr ""

#: ../../pupdevices/remote.rst:36
msgid "Changing the light color using the buttons"
msgstr ""

#: ../../pupdevices/remote.rst:43
msgid "Using the timeout setting"
msgstr ""

#: ../../pupdevices/remote.rst:45
msgid ""
"You can use the ``timeout`` argument to change for how long the hub "
"searches for the remote. If you choose ``None``, it will search forever."
msgstr ""

#: ../../pupdevices/remote.rst:52
msgid ""
"If the remote was not found within the specified ``timeout``, an "
":ref:`OSError <OSError>` is raised. You can catch this exception to run "
"other code if the remote is not available."
msgstr ""

#: ../../pupdevices/remote.rst:61
msgid "Changing the name of the remote"
msgstr ""

#: ../../pupdevices/remote.rst:63
msgid ""
"You can change the Bluetooth name of the remote. The factory default name"
" is ``Handset``."
msgstr ""

#: ../../pupdevices/remote.rst:69
msgid ""
"You can specify this name when connecting to the remote. This lets you "
"pick the right one if multiple remotes are nearby."
msgstr ""

#: ../../pupdevices/tiltsensor.rst:4
msgid "Tilt Sensor"
msgstr ""

#: of pybricks.pupdevices.TiltSensor:1
msgid "LEGO® Powered Up Tilt Sensor."
msgstr ""

#: of pybricks.pupdevices.TiltSensor.tilt:1
msgid "Measures the tilt relative to the horizontal plane."
msgstr ""

#: of pybricks.pupdevices.TiltSensor.tilt:3
msgid "Tuple of pitch and roll angles."
msgstr ""

#: ../../pupdevices/tiltsensor.rst:18
msgid "Measuring pitch and roll"
msgstr ""

#: ../../pupdevices/ultrasonicsensor.rst:4
msgid "Ultrasonic Sensor"
msgstr ""

#: of pybricks.pupdevices.UltrasonicSensor.distance:1
msgid ""
"Measures the distance between the sensor and an object using ultrasonic "
"sound waves."
msgstr ""

#: of pybricks.pupdevices.UltrasonicSensor.distance:4
msgid "Measured distance. If no valid distance was measured, it returns 2000 mm."
msgstr ""

#: of pybricks.pupdevices.UltrasonicSensor.presence:1
msgid ""
"Checks for the presence of other ultrasonic sensors by detecting "
"ultrasonic sounds."
msgstr ""

#: of pybricks.pupdevices.UltrasonicSensor.presence:4
msgid "``True`` if ultrasonic sounds are detected, ``False`` if not."
msgstr ""

#: ../../pupdevices/ultrasonicsensor.rst:18
msgid ""
"This sensor has 4 built-in lights. You can adjust the brightness of each "
"light."
msgstr ""

#: of pybricks._common.LightArray4.on:3
msgid ""
"Use a single value to set the brightness of all lights at the same time. "
"Use a tuple of four values to set the brightness of each light "
"individually. The order of the lights is shown in the image above."
msgstr ""

#: ../../pupdevices/ultrasonicsensor.rst:29
msgid "Measuring distance and switching on the lights"
msgstr ""

#: ../../pupdevices/ultrasonicsensor.rst:35
msgid "Gradually change the brightness of the lights"
msgstr ""

