# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2023 The Pybricks Authors
# This file is distributed under the same license as the pybricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybricks v3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-05 21:14+0900\n"
"PO-Revision-Date: 2024-04-05 23:24+0900\n"
"Last-Translator: Minoru INACHI\n"
"Language-Team: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../hubs/cityhub.rst:4
msgid "City Hub"
msgstr "シティハブ"

#: ../../hubs/index.rst
msgid ".. image:: ../main/cad/output/hub-city.png"
msgstr ""

#: of pybricks.hubs.CityHub:1
msgid "LEGO® City Hub."
msgstr "LEGO® シティハブ。"

#: ../../hubs/cityhub.rst ../../hubs/essentialhub.rst ../../hubs/movehub.rst
#: ../../hubs/primehub.rst ../../hubs/technichub.rst of
#: pybricks._common.Accelerometer.acceleration pybricks._common.BLE.observe
#: pybricks._common.BLE.signal_strength pybricks._common.ColorLight.animate
#: pybricks._common.ColorLight.blink pybricks._common.ColorLight.on
#: pybricks._common.IMU.angular_velocity pybricks._common.IMU.reset_heading
#: pybricks._common.IMU.rotation pybricks._common.IMU.settings
#: pybricks._common.LightMatrix.animate pybricks._common.LightMatrix.char
#: pybricks._common.LightMatrix.icon pybricks._common.LightMatrix.number
#: pybricks._common.LightMatrix.orientation pybricks._common.LightMatrix.pixel
#: pybricks._common.LightMatrix.text pybricks._common.Speaker.beep
#: pybricks._common.Speaker.play_notes pybricks._common.Speaker.volume
#: pybricks._common.System.set_stop_button pybricks.hubs.CityHub
#: pybricks.hubs.EssentialHub pybricks.hubs.MoveHub pybricks.hubs.PrimeHub
#: pybricks.hubs.TechnicHub
msgid "Parameters"
msgstr "パラメータ"

#: of pybricks.hubs.CityHub:3 pybricks.hubs.EssentialHub:14
#: pybricks.hubs.MoveHub:3 pybricks.hubs.PrimeHub:14
#: pybricks.hubs.TechnicHub:14
msgid ""
"A value from 0 to 255 indicating which channel ``hub.ble.broadcast()`` "
"will use. Default is channel 0."
msgstr ""
"``hub.ble.broadcast()`` が使うチャンネルを示す0から255の値。"
"デフォルトのチャンネルは0です。"

#: of pybricks.hubs.CityHub:5 pybricks.hubs.EssentialHub:16
#: pybricks.hubs.MoveHub:5 pybricks.hubs.PrimeHub:16
#: pybricks.hubs.TechnicHub:16
msgid ""
"A list of channels to listen to when ``hub.ble.observe()`` is called. "
"Listening to more channels requires more memory. Default is an empty list"
" (no channels)."
msgstr ""
"``hub.ble.observe()`` が呼び出された際にリッスンするチャンネルのリスト。"
"より多くのチャンネルをリッスンすると、より多くのメモリが必要になります。"
"デフォルトは空のリスト(チャンネルなし)です。"

#: of pybricks.hubs.CityHub:9 pybricks.hubs.EssentialHub:20
#: pybricks.hubs.MoveHub:9 pybricks.hubs.PrimeHub:20
#: pybricks.hubs.TechnicHub:20
msgid "Added *broadcast_channel* and *observe_channels* arguments."
msgstr "*broadcast_channel* と *observe_channels* 引数を追加。"

#: ../../hubs/cityhub.rst:13 ../../hubs/essentialhub.rst:13
#: ../../hubs/movehub.rst:15 ../../hubs/primehub.rst:20
#: ../../hubs/technichub.rst:13
msgid "Using the hub status light"
msgstr "ハブ内蔵ステータスライトの利用"

#: of pybricks._common.ColorLight.on:1
msgid "Turns on the light at the specified color."
msgstr "指定の色でライトを点灯します。"

#: of pybricks._common.ColorLight.blink:11 pybricks._common.ColorLight.on:3
msgid "Color of the light."
msgstr "ライトの色。"

#: of pybricks._common.ColorLight.off:1
msgid "Turns off the light."
msgstr "ライトの消灯。"

#: of pybricks._common.ColorLight.blink:1
msgid ""
"Blinks the light at a given color by turning it on and off for given "
"durations."
msgstr ""
"指定の色で、指定の時間だけライトを点灯・消灯して点滅させます。"

#: of pybricks._common.ColorLight.blink:4
msgid ""
"The light keeps blinking indefinitely while the rest of your program "
"keeps running."
msgstr ""
"プログラムの残りの部分が動作している間、ライトは無限に点滅し続けます。"

#: of pybricks._common.ColorLight.blink:7
msgid ""
"This method provides a simple way to make basic but useful patterns. For "
"more generic and multi-color patterns, use ``animate()`` instead."
msgstr ""
"このメソッドは、基本的で、よく使うパターンを作成する簡易な方法を提供します。"
"より一般的で複数色のパターンを作成するには、代わりに ``animate()`` "
"を使用してください。"

#: of pybricks._common.ColorLight.blink:13
msgid "Sequence of time values of the form ``[on_1, off_1, on_2, off_2, ...]``."
msgstr "時間のシーケンスを ``[on_1, off_1, on_2, off_2, ...]`` の形式で指定。"

#: of pybricks._common.ColorLight.animate:1
msgid ""
"Animates the light with a sequence of colors, shown one by one for the "
"given interval."
msgstr ""
"指定の間隔で１つずつ表示される色のシーケンスでライトをアニメートします。"

#: of pybricks._common.ColorLight.animate:4
msgid ""
"The animation runs in the background while the rest of your program keeps"
" running. When the animation completes, it repeats."
msgstr ""
"このアニメーションはバックグラウンドで実行され、プログラムの他の部分は継続的に実行されます。"
"アニメーションが完了すると、繰返し実行します。"

#: of pybricks._common.ColorLight.animate:7
msgid "Sequence of :class:`Color <.parameters.Color>` values."
msgstr ":class:`Color <.parameters.Color>` の値のシーケンス。"

#: of pybricks._common.ColorLight.animate:10
msgid "Time between color updates."
msgstr "色の更新間隔。"

#: ../../hubs/cityhub.rst:23 ../../hubs/essentialhub.rst:51
#: ../../hubs/movehub.rst:35 ../../hubs/primehub.rst:93
#: ../../hubs/technichub.rst:47
msgid "Using connectionless Bluetooth messaging"
msgstr "非接続 Bluetooth メッセージングの利用"

#: of pybricks._common.BLE.broadcast:1
msgid ""
"Starts broadcasting the given data on the ``broadcast_channel`` you "
"selected when initializing the hub."
msgstr ""
"ハブ初期化時に選択した ``broadcast_channel`` で、指定データのブロードキャスト"
"を開始します。"

#: of pybricks._common.BLE.broadcast:4
msgid ""
"Data may be of type ``int``, ``float``, ``str``, ``bytes``, ``True``, or "
"``False``, or a list thereof."
msgstr ""
"データには、型 ``int``, ``float``, ``str``, ``bytes``, ``True``, ``False`` "
"のもの、もしくはそれらのリストを指定できます。"

#: of pybricks._common.BLE.broadcast:7
msgid ""
"Choose ``None`` to stop broadcasting. This helps improve performance when"
" you don't need the broadcast feature, especially when observing at the "
"same time."
msgstr ""
"ブロードキャスト通信を停止するに ``None`` を指定します。"
"ブロードキャスト通信が必要ない場合には、それを停止することにより"
"パフォーマンスを向上させられます。同時にデータ観察をしている場合には特に便利です。"

#: of pybricks._common.BLE.broadcast:11
msgid ""
"The total data size is quite limited (26 bytes). ``True`` and ``False`` "
"take 1 byte each. ``float`` takes 5 bytes. ``int`` takes 2 to 5 bytes "
"depending on how big the number is. ``str`` and ``bytes`` take the number"
" of bytes in the object plus one extra byte."
msgstr ""
"合計データサイズはかなり制限されています(26バイト)。 "
"``True`` と ``False`` はそれぞれ1バイトを占有します。 "
"``float`` は5バイトを占有します。 "
"``int`` は数値の大きさに応じて2から5バイトを占有します。 "
"``str`` と ``bytes`` はオブジェクトのバイト数に加えて1バイトを占有します。"

#: of pybricks._common.BLE.broadcast:16
msgid ""
"When multitasking, only one task can broadcast at a time. To broadcast "
"information from multiple tasks (or block stacks), you could use a "
"dedicated separate task that broadcast new values when one or more "
"variables change."
msgstr ""
"マルチタスクを行う場合、ブロードキャスト通信は一度に1つのタスクでしかできません。"
"複数のタスク(またはブロックスタック)からの情報をブロードキャストするには、"
"ブロードキャスト通信用の専用タスクを用意して、他の複数タスクからの情報を"
"送信するようにできます。"

#: of pybricks._common.BLE.broadcast:15
msgid "Params:"
msgstr "パラメータ:"

#: of pybricks._common.BLE.broadcast:12
msgid "The value or values to be broadcast."
msgstr "ブロードキャストする値、もしくは値のリスト。"

#: of pybricks._common.BLE.observe:1
msgid "Retrieves the last observed data for a given channel."
msgstr "指定したチャンネルで最後に観測されたデータを取得します。"

#: of pybricks._common.BLE.observe:3
msgid ""
"Receiving data is more reliable when the hub is not connected to a "
"computer or other devices at the same time."
msgstr ""
"ハブがコンピュータや他のデバイスに同時に接続しないようにすると、"
"データを受信する信頼性が高くなります。"

#: of pybricks._common.BLE.observe:6
msgid "The channel to observe (0 to 255)."
msgstr "観測するチャンネル(0から255)。"

#: ../../hubs/cityhub.rst ../../hubs/essentialhub.rst ../../hubs/movehub.rst
#: ../../hubs/primehub.rst ../../hubs/technichub.rst of
#: pybricks._common.Accelerometer.acceleration
#: pybricks._common.Accelerometer.tilt pybricks._common.BLE.observe
#: pybricks._common.BLE.signal_strength pybricks._common.Battery.current
#: pybricks._common.Battery.voltage pybricks._common.Charger.connected
#: pybricks._common.Charger.current pybricks._common.Charger.status
#: pybricks._common.IMU.angular_velocity pybricks._common.IMU.heading
#: pybricks._common.IMU.orientation pybricks._common.IMU.ready
#: pybricks._common.IMU.rotation pybricks._common.IMU.stationary
#: pybricks._common.Keypad.pressed
#: pybricks._common.SimpleAccelerometer.acceleration
#: pybricks._common.SimpleAccelerometer.up pybricks._common.System.name
#: pybricks._common.System.reset_reason
msgid "Returns"
msgstr "戻り値"

#: of pybricks._common.BLE.observe:9
msgid ""
"The received data in the same format as it was sent, or ``None`` if no "
"recent data is available."
msgstr ""
"送信されたデータは、送信された形式と同じ形式で受信されます。"
"最近のデータが利用できない場合は ``None`` が返されます。"

#: of pybricks._common.BLE.signal_strength:1
msgid "Gets the average signal strength in dBm for the given channel."
msgstr "指定したチャンネルの平均信号強度を dBm 単位で取得します。"

#: of pybricks._common.BLE.signal_strength:3
msgid ""
"This indicates how near the broadcasting device is. Nearby devices may "
"have a signal strength around -40 dBm, while far away devices might have "
"a signal strength around -70 dBm."
msgstr ""
"これはブロードキャストデバイスがどれだけ近くにあるかを示します。"
"近くのデバイスは約 -40 dBmの信号強度を持ち、"
"遠くのデバイスは約 -70 dBmの信号強度を持ちます。"

Bluetoothチップからファームウェアバージョンを取得します。
#: of pybricks._common.BLE.signal_strength:3
msgid ""
"This is useful for detecting how near the broadcasting device is. A close"
" device may have a signal strength around -40 dBm while a far away device"
" might have a signal strength around -70 dBm."
msgstr ""
"これは、ブロードキャストデバイスがどの程度近いかを検出するのに役立ちます。"
"近くのデバイスは -40 dBm 程度の信号強度を持ち、"
"遠くのデバイスは -70 dBm 程度の信号強度を持ちます。"

#: of pybricks._common.BLE.signal_strength:7
msgid "The channel number (0 to 255)."
msgstr "チャンネル番号(0から255)。"

#: of pybricks._common.BLE.signal_strength:10
msgid "The signal strength or ``-128`` if there is no recent observed data."
msgstr "最近の観測データがない場合、信号強度は ``-128`` となります。"

#: of pybricks._common.BLE.version:1
msgid "Gets the firmware version from the Bluetooth chip."
msgstr "Bluetooth チップからファームウェアバージョンを取得します。"

#: ../../hubs/cityhub.rst:33 ../../hubs/essentialhub.rst:61
#: ../../hubs/movehub.rst:45 ../../hubs/primehub.rst:103
#: ../../hubs/technichub.rst:57
msgid "Using the battery"
msgstr "バッテリー値の利用"

#: of pybricks._common.Battery.voltage:1
msgid "Gets the voltage of the battery."
msgstr "バッテリーの電圧を取得します。"

#: of pybricks._common.Battery.voltage:3
msgid "Battery voltage."
msgstr "バッテリーの電圧"

#: of pybricks._common.Battery.current:1
msgid "Gets the current supplied by the battery."
msgstr "バッテリーから供給される電流を取得します。"

#: of pybricks._common.Battery.current:3
msgid "Battery current."
msgstr "バッテリーの電流。"

#: ../../hubs/cityhub.rst:29 ../../hubs/movehub.rst:41
#: ../../hubs/technichub.rst:43
msgid "Button and system control"
msgstr "ボタンとシステム制御"

#: of pybricks._common.Keypad.pressed:1
msgid "Checks which buttons are currently pressed."
msgstr "どのボタンが押されているかをチェックします。"

#: of pybricks._common.Keypad.pressed:3
msgid "Set of pressed buttons."
msgstr "押されているボタンの集合。"

#: of pybricks._common.System.set_stop_button:1
msgid "Sets the button or button combination that stops a running script."
msgstr "実行中のスクリプトを停止させるボタンまたはボタンの組み合わせを設定します。"

#: of pybricks._common.System.set_stop_button:3
msgid ""
"Normally, the center button is used to stop a running script. You can "
"change or disable this behavior in order to use the button for other "
"purposes."
msgstr ""
"デフォルトでは実行中のスクリプトを停止するのにセンターボタンを使います。"
"この動作を変更または無効にして、センターボタンを他の用途に使えるようにできます。"

#: of pybricks._common.System.set_stop_button:7
msgid ""
"A button such as :attr:`Button.CENTER "
"<pybricks.parameters.Button.CENTER>`, or a tuple of multiple buttons. "
"Choose ``None`` to disable the stop button altogether. If you do, you can"
" still turn the hub off by holding the center button for three seconds."
msgstr ""
":attr:`Button.CENTER <pybricks.parameters.Button.CENTER>` 、"
"または複数のボタンのタプルを指定します。"
"停止ボタンを完全に無効にするには ``None`` を指定します。"
"望むなら、中央ボタンを３秒間押すことで、ハブをオフにできます。"

#: of pybricks._common.System.name:1
msgid "Gets the hub name. This is the name you see when connecting via Bluetooth."
msgstr "ハブ名を取得します。これは Bluetooth で接続したときに表示される名前です。"

#: of pybricks._common.System.name:4
msgid "The hub name."
msgstr "ハブ名。"

#: of pybricks._common.System.storage:1
msgid "Reads or writes binary data to persistent storage."
msgstr "バイナリデータを永続ストレージに読み書きします。"

#: of pybricks._common.System.storage:3
msgid ""
"This lets you store data that can be used the next time you run the "
"program."
msgstr ""
"これにより、次にプログラムを実行するときに使えるデータを保存できます。"

#: of pybricks._common.System.storage:6
msgid ""
"The data will be saved to flash memory when you turn the hub off "
"normally. It will not be saved if the batteries are removed *while* the "
"hub is still running."
msgstr ""
"データは通常、ハブの電源をオフにしたときにフラッシュメモリーに保存されます。"
"ハブを起動したままバッテリーを外すと保存されません。"

#: of pybricks._common.System.storage:10
msgid ""
"Once saved, the data will remain available even after you remove the "
"batteries."
msgstr ""
"一度保存されたデータは、バッテリーをを外しても残ります。"

#: of pybricks._common.System.storage:13
msgid "The offset from the start of the user storage memory, in bytes."
msgstr "ユーザーストレージメモリの先頭からのオフセットをバイト数で指定します。"

#: of pybricks._common.System.storage:15
msgid "The number of bytes to read. Omit this argument when writing."
msgstr "読み込むバイト数。書出しの場合はこの引数を省略します。"

#: of pybricks._common.System.storage:17
msgid "The bytes to write. Omit this argument when reading."
msgstr "書き込むバイト数。読込み場合は、この引数を省略します。"

#: of pybricks._common.System.storage:20
msgid "The bytes read if reading, otherwise ``None``."
msgstr "読込み場合は読み込んだバイト数、書出しの場合は ``None`` 。"

#: ../../hubs/cityhub.rst ../../hubs/essentialhub.rst ../../hubs/movehub.rst
#: ../../hubs/primehub.rst ../../hubs/technichub.rst
msgid "Raises"
msgstr "例外"

#: of pybricks._common.System.storage:22
msgid "If you try to read or write data outside of the allowed range."
msgstr "許容範囲外のデータを読み書きしようとした場合。"

#: ../../hubs/cityhub.rst:38 ../../hubs/movehub.rst:50
#: ../../hubs/technichub.rst:52
msgid ""
"You can store up to 128 bytes of data on this hub. The data is cleared "
"when you update the Pybricks firmware or if you restore the original "
"firmware."
msgstr ""
"このハブには最大128バイトのデータを保存できます。"
"データは Pybricks のファームウェアをアップデートしたとき、"
"または元のファームウェアに戻したときにクリアされます。"

#: of pybricks._common.System.shutdown:1
msgid "Stops your program and shuts the hub down."
msgstr "プログラムを停止し、ハブをシャットダウンします。"

#: of pybricks._common.System.reset_reason:1
msgid ""
"Finds out how and why the hub (re)booted. This can be useful to diagnose "
"some problems."
msgstr ""
"ハブが(再)起動した理由と原因を調べます。"
"これは、いくつかの問題を診断するのに役立ちます。"

#: of pybricks._common.System.reset_reason:4
msgid ""
"* ``0`` if the hub was previously powered off   normally. * ``1`` if the "
"hub rebooted automatically, like   after a firmware update. * ``2`` if "
"the hub previously   crashed due to a watchdog timeout, which indicates a"
" firmware   issue."
msgstr ""
"* ``0`` ハブの電源が以前に正常に切られた。 "
"* ``1`` ファームウェアの更新後など、ハブが自動的に再起動した。 "
"* ``2`` ファームウェアの問題を示すウォッチドッグタイムアウトにより、以前に"
"ハブがクラッシュした。"

#: of pybricks._common.System.reset_reason:6
msgid "``0`` if the hub was previously powered off normally."
msgstr "``0`` ハブの電源が以前に正常に切られた。 "

#: of pybricks._common.System.reset_reason:8
msgid "``1`` if the hub rebooted automatically, like after a firmware update."
msgstr "``1`` ファームウェアの更新後など、ハブが自動的に再起動した。 "

#: of pybricks._common.System.reset_reason:10
msgid ""
"``2`` if the hub previously crashed due to a watchdog timeout, which "
"indicates a firmware issue."
msgstr ""
"``2`` ファームウェアの問題を示すウォッチドッグ・タイムアウトにより、以前に"
"ハブがクラッシュした。"

#: ../../hubs/cityhub.rst:47 ../../hubs/essentialhub.rst:69
#: ../../hubs/movehub.rst:59 ../../hubs/primehub.rst:115
#: ../../hubs/technichub.rst:61
msgid "Status light examples"
msgstr "ステータスライトの利用例"

#: ../../hubs/cityhub.rst:50 ../../hubs/essentialhub.rst:72
#: ../../hubs/movehub.rst:62 ../../hubs/primehub.rst:118
#: ../../hubs/technichub.rst:64
msgid "Turning the light on and off"
msgstr "ライトの点灯と消灯"

#: ../../hubs/cityhub.rst:52
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub()\n"
"\n"
"# ライトの点灯と消灯を５回繰り返す。\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"

#: ../../hubs/cityhub.rst:56 ../../hubs/essentialhub.rst:78
#: ../../hubs/primehub.rst:124 ../../hubs/technichub.rst:70
msgid "Changing brightness and using custom colors"
msgstr "明るさの変更と独自色の指定"

#: ../../hubs/cityhub.rst:58
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Show the color at 30% brightness.\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# Use your own custom color.\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# Go through all the colors.\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub()\n"
"\n"
"# 30% の照度で色を表示。\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# 独自色を使用。\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# すべての色を変化させながら表示。\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"

#: ../../hubs/cityhub.rst:62 ../../hubs/essentialhub.rst:84
#: ../../hubs/movehub.rst:68 ../../hubs/primehub.rst:130
#: ../../hubs/technichub.rst:76
msgid "Making the light blink"
msgstr "ライトの点滅"

#: ../../hubs/cityhub.rst:64
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = CityHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub()\n"
"\n"
"# 赤で点滅。\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# 緑の遅い点滅と速い点滅を続ける。\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"

#: ../../hubs/cityhub.rst:68 ../../hubs/essentialhub.rst:90
#: ../../hubs/primehub.rst:136 ../../hubs/technichub.rst:82
msgid "Creating light animations"
msgstr "ライトアニメーションの作成"

#: ../../hubs/cityhub.rst:70
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Make an animation with multiple colors.\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# Make the color RED grow faint and bright using a sine pattern.\n"
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# Cycle through a rainbow of colors.\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub()\n"
"\n"
"# 複数色を使ったアニメーションを行う。\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# 赤をサインカーブのパターンで照度を変えながら表示。
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# 虹色で繰り返しながら表示。\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"

#: ../../hubs/cityhub.rst:85 ../../hubs/essentialhub.rst:151
#: ../../hubs/movehub.rst:100 ../../hubs/primehub.rst:262
#: ../../hubs/technichub.rst:143
msgid "Bluetooth examples"
msgstr "Bluetooth の例"

#: ../../hubs/cityhub.rst:88 ../../hubs/essentialhub.rst:154
#: ../../hubs/movehub.rst:103 ../../hubs/primehub.rst:265
#: ../../hubs/technichub.rst:146
msgid "Broadcasting data to other hubs"
msgstr "他のハブへのデータのブロードキャスト"

#: ../../hubs/cityhub.rst:90
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub(broadcast_channel=1)\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブに送るモーター回転角度の読取り。\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # ブロードキャストするデータを設定。まだブロードキャストしていなければ開始。\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信するので、それ以上の頻度で\n"
"    # broadcast() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/cityhub.rst:94 ../../hubs/essentialhub.rst:160
#: ../../hubs/movehub.rst:109 ../../hubs/primehub.rst:271
#: ../../hubs/technichub.rst:152
msgid "Observing data from other hubs"
msgstr "他のハブからのデータ観測"

#: ../../hubs/cityhub.rst:96
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub(observe_channels=[1])\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブからのブロードキャストの受信。\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # 過去1秒間にデータが受信されていない。\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # データが受信され、かつ1秒未満の新しいデータ。\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* には、他のハブで hub.ble.broadcast() に指定した\n"
"        # 順序と同じ値が同じ順序で含まれています。\n"
"        left_angle, right_angle = data\n"
"\n"
"        # 他のハブのモーターの位置をこのハブのモーターに反映します。\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信されるので、それ以上の頻度で\n"
"    # observe() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/cityhub.rst:74 ../../hubs/movehub.rst:89
#: ../../hubs/technichub.rst:122
msgid "Button and system examples"
msgstr "ボタンとシステムの例"

#: ../../hubs/cityhub.rst:77 ../../hubs/essentialhub.rst:133
#: ../../hubs/movehub.rst:92 ../../hubs/technichub.rst:125
msgid "Using the stop button during your program"
msgstr "プログラム中でのストップボタンの利用方法"

#: ../../hubs/cityhub.rst:79
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Disable the stop button.\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# Check the button for 5 seconds.\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # Set light to green if pressed, else red.\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# Enable the stop button again.\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# Now you can press the stop button as usual.\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub()\n"
"\n"
"# ストップボタンを無効化。\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# 5秒間のボタンチェック。\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # 押されたら緑、押さてなければ赤でライトを点灯。\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# ストップボタンを再有効化。\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# これで通常どおりストップボタンが使える。\n"
"wait(5000)\n"

#: ../../hubs/cityhub.rst:83 ../../hubs/essentialhub.rst:139
#: ../../hubs/movehub.rst:98 ../../hubs/primehub.rst:250
#: ../../hubs/technichub.rst:131
msgid "Turning the hub off"
msgstr "ハブの電源オフ"

#: ../../hubs/cityhub.rst:85
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""
"from pybricks.hubs import CityHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = CityHub()\n"
"\n"
"# さよならを言い、少し時間をおいて実行する。\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# ハブをシャットダウン。\n"
"hub.system.shutdown()\n"

#: ../../hubs/essentialhub.rst:4
msgid "Essential Hub"
msgstr "Spike スモールハブ"

#: ../../hubs/index.rst
msgid ".. image:: ../main/cad/output/hub-essential.png"
msgstr ""

#: of pybricks.hubs.EssentialHub:1
msgid "LEGO® SPIKE Essential Hub."
msgstr "LEGO® SPIKE スモールハブ。"

#: of pybricks.hubs.EssentialHub:3
msgid ""
"Initializes the hub. Optionally, specify how the hub is :ref:`placed in "
"your design <robotframe>` by saying in which direction the top side (with"
" the button) and the front side (with the USB port, and I/O ports A and "
"B) are pointing."
msgstr ""
"ハブを初期化します。"
"オプションで、ハブの上面(ボタンのある面)と前面(USBポートと I/O ポート A・B のある面)"
"のある向きを指定することで、 :ref:`ハブの取付けのデザイン <robotframe>` を反映できます。"

#: of pybricks.hubs.EssentialHub:8 pybricks.hubs.PrimeHub:8
#: pybricks.hubs.TechnicHub:8
msgid "The axis that passes through the *top side* of the hub."
msgstr "ハブの上面を通る軸。"

#: of pybricks.hubs.EssentialHub:11 pybricks.hubs.PrimeHub:11
#: pybricks.hubs.TechnicHub:11
msgid "The axis that passes through the *front side* of the hub."
msgstr "ハブの前面を通る軸。"

#: ../../hubs/essentialhub.rst:23
msgid "Using the button"
msgstr "ボタンの利用"

#: ../../hubs/essentialhub.rst:27 ../../hubs/movehub.rst:25
#: ../../hubs/primehub.rst:61 ../../hubs/technichub.rst:23
msgid "Using the IMU"
msgstr "IMU の利用"

#: of pybricks._common.IMU.ready:1
msgid "Checks if the device is calibrated and ready for use."
msgstr "デバイスがキャリブレーションされ、使用可能な状態にあるかどうかをチェックします。"

#: of pybricks._common.IMU.ready:3
msgid ""
"This becomes ``True`` when the robot has been sitting stationary for a "
"few seconds, which allows the device to re-calibrate. It is ``False`` if "
"the hub has just been started, or if it hasn't had a chance to calibrate "
"for more than 10 minutes."
msgstr ""
"ロボットが数秒間静止するとデバイスの再キャリブレーションが行われるため、 ``True`` "
"になります。ハブを起動したばかりのときや、10分以上キャリブレーションする機会がなかった"
"ときは、 ``False`` になります。"

#: of pybricks._common.IMU.ready:8
msgid "``True`` if it is ready for use, ``False`` if not."
msgstr "使用可能であれば ``True`` 、そうでなければ ``False`` 。"

#: of pybricks._common.IMU.stationary:1
msgid "Checks if the device is currently stationary (not moving)."
msgstr "現在、デバイスが静止しているかどうか(動いていないか)をチェックします。"

#: of pybricks._common.IMU.stationary:3
msgid "``True`` if stationary for at least a second, ``False`` if it is moving."
msgstr "1秒以上静止している場合は ``True`` 、動いている場合は ``False`` 。"

#: of pybricks._common.SimpleAccelerometer.up:1
msgid "Checks which side of the hub currently faces upward."
msgstr "現在、ハブのどちらの面を上に向けているかをチェックします。"

#: of pybricks._common.SimpleAccelerometer.up:3
msgid ""
"``Side.TOP``, ``Side.BOTTOM``, ``Side.LEFT``, ``Side.RIGHT``, "
"``Side.FRONT`` or ``Side.BACK``."
msgstr ""
"``Side.TOP``, ``Side.BOTTOM``, ``Side.LEFT``, ``Side.RIGHT``, "
"``Side.FRONT``, ``Side.BACK`` のいずれか。"

#: of pybricks._common.Accelerometer.tilt:1
msgid ""
"Gets the pitch and roll angles. This is relative to the :ref:`user-"
"specified neutral orientation <robotframe>`."
msgstr ""
"ピッチ角とロール角を取得します。これは、 :ref:`user-"
"specified neutral orientation <robotframe>` からの相対的なものです。"

#: of pybricks._common.Accelerometer.tilt:4
msgid ""
"The order of rotation is pitch-then-roll. This is equivalent to a "
"positive rotation along the robot y-axis and then a positive rotation "
"along the x-axis."
msgstr ""
"回転の順序は、ピッチ角、ロール画です。"
"これはロボットのY軸に沿った正回転と、X軸に沿った正回転に相当します。"

#: of pybricks._common.Accelerometer.tilt:8
msgid "Tuple of pitch and roll angles in degrees."
msgstr "ピッチ角とロール角のタプル(度単位)。"

#: of pybricks._common.Accelerometer.acceleration:1
msgid ""
"Gets the acceleration of the device along a given axis in the :ref:`robot"
" reference frame <robotframe>`."
msgstr ""
":ref:`ロボットの基準座標系 <robotframe>` における、指定した軸に沿った"
"デバイスの加速度を取得します。"

#: of pybricks._common.Accelerometer.acceleration:4
msgid "Axis along which the acceleration should be measured."
msgstr "加速度を計測する軸。"

#: of pybricks._common.Accelerometer.acceleration:8
msgid ""
"Acceleration along the specified axis. If you specify no axis, this "
"returns a vector of accelerations along all axes."
msgstr ""
"指定された軸に沿った加速度。軸を指定しない場合は、すべての軸に沿った加速度の"
"ベクトルが返ります。"

#: of pybricks._common.IMU.angular_velocity:1
msgid ""
"Gets the angular velocity of the device along a given axis in the "
":ref:`robot reference frame <robotframe>`."
msgstr ""
":ref:`ロボットの基準座標系 <robotframe>` における、"
"指定した軸に沿ったデバイスの角速度を取得します。"

#: of pybricks._common.IMU.angular_velocity:4
msgid "Axis along which the angular velocity should be measured."
msgstr "角速度を計測する軸を指定します。"

#: of pybricks._common.IMU.angular_velocity:8
msgid ""
"Angular velocity along the specified axis. If you specify no axis, this "
"returns a vector of accelerations along all axes."
msgstr ""
"指定された軸に沿った角速度。軸を指定しない場合は、すべての軸に沿った加速度のベクトルが"
"返ります。"

#: of pybricks._common.IMU.heading:1
msgid ""
"Gets the heading angle of your robot. A positive value means a clockwise "
"turn."
msgstr ""
"ロボットの方位角を取得します。正の値は時計回りに回転することを意味します。"

#: of pybricks._common.IMU.heading:4
msgid ""
"The heading is 0 when your program starts. The value continues to grow "
"even as the robot turns more than 180 degrees. It does not wrap around to"
" -180 like it does in some apps."
msgstr ""
"プログラム開始時のヘディングは 0 です。ロボットが 180 度以上回転しても値は増え続けます。"
"一部のアプリのように-180に折り返すことはありません。"

#: of pybricks._common.IMU.heading:9
msgid ""
"*For now, this method only keeps track of the heading while the robot is "
"on a flat surface.*"
msgstr ""
"*今のところ、このメソッドはロボットが平らな場所にいる間だけ方位角を記録しています。*"

#: of pybricks._common.IMU.heading:12
msgid ""
"This means that the value is no longer correct if you lift it from the "
"table. To solve this, you can call ``reset_heading`` to reset the heading"
" to a known value *after* you put it back down. For example, you could "
"align your robot with the side of the competition table and reset the "
"heading 90 degrees as the new starting point."
msgstr ""
"つまり、テーブルから持ち上げると、その値はもはや正しいものではありません。"
"これを解決するには ``reset_heading`` を呼び出して、ロボットを置いた *後に* "
"方位角を既知の値にリセットできます。たとえば、ロボットを競技テーブルの側面に"
"合わせ、新しい出発点として方位角を 90 度にリセットできます。"

#: of pybricks._common.IMU.heading:19
msgid "Heading angle relative to starting orientation."
msgstr "開始時の姿勢に対する方位角。"

#: of pybricks._common.IMU.reset_heading:1
msgid "Resets the accumulated heading angle of the robot."
msgstr "ロボットの累積方位角をリセットします。"

#: of pybricks._common.IMU.reset_heading:3
msgid "Value to which the heading should be reset."
msgstr "リセットする方位の値(deg)。"

#: of pybricks._common.IMU.rotation:1
msgid ""
"Gets the rotation of the device along a given axis in the :ref:`robot "
"reference frame <robotframe>`."
msgstr ""
":ref:`ロボットの基準座標系 <robotframe>` で示されている軸に沿ったデバイスの"
"回転を取得します。"

#: of pybricks._common.IMU.rotation:4
msgid ""
"This value is useful if your robot *only* rotates along the requested "
"axis. For general three-dimensional motion, use the ``orientation()`` "
"method instead."
msgstr ""
"この値は、要求された軸に沿ってロボットが回転する場合に *だけ* 便利です。"
"一般的な3次元の動きには、代わりに ``orientation()`` メソッドを使ってください。"

#: of pybricks._common.IMU.rotation:8
msgid "The value starts counting from ``0`` when you initialize this class."
msgstr "値はこのクラスの初期化時に 0 からカウントを開始します。"

#: of pybricks._common.IMU.rotation:10
msgid "Axis along which the rotation should be measured."
msgstr "回転を測定する軸。"

#: of pybricks._common.IMU.rotation:13
msgid "The rotation angle."
msgstr "回転角度。"

#: of pybricks._common.IMU.orientation:1
msgid ""
"Gets the three-dimensional orientation of the robot in the :ref:`robot "
"reference frame <robotframe>`."
msgstr ""
":ref:`ロボットの基準座標系 <robotframe>` におけるロボットの3次元姿勢を取得します。"

#: of pybricks._common.IMU.orientation:4
msgid ""
"It returns a rotation matrix whose columns represent the ``X``, ``Y``, "
"and ``Z`` axis of the robot."
msgstr ""
"ロボットの ``X``, ``Y``, ``Z`` 軸を列とする回転行列を返します。"

#: of pybricks._common.IMU.orientation:7
msgid "This method is not yet implemented."
msgstr "このメソッドはまだ実装されていません。"

#: of pybricks._common.IMU.orientation:9
msgid "The rotation matrix."
msgstr "回転行列。"

#: of pybricks._common.IMU.settings:1
msgid ""
"Configures the IMU settings. If no arguments are given, this returns the "
"current values."
msgstr ""
"IMU の設定を行います。引数を与えない場合は現在の値を返します。"

#: of pybricks._common.IMU.settings:4
msgid ""
"The ``angular_velocity_threshold`` and ``acceleration_threshold`` define "
"when the hub is considered stationary. If all measurements stay below "
"these thresholds for one second, the IMU will recalibrate itself."
msgstr ""
"``angular_velocity_threshold`` と ``acceleration_threshold`` は、"
"ハブが静止しているとみなされるタイミングを定義します。"
"すべての測定値がこれらの閾値を下回る状態が1秒間続くと、IMU は再キャリブレーションを行います。"

#: of pybricks._common.IMU.settings:9
msgid ""
"In a noisy room with high ambient vibrations (such as a competition "
"hall), it is recommended to increase the thresholds slightly to give your"
" robot the chance to calibrate. To verify that your settings are working "
"as expected, test that the ``stationary()`` method gives ``False`` if "
"your robot is moving, and ``True`` if it is sitting still for at least a "
"second."
msgstr ""
"周囲の振動が大きい騒がしい部屋(競技会場など)では、ロボットがキャリブレーションを行う"
"機会を与えるために、しきい値を少し大きくすることをお勧めします。設定が期待通りに機能して"
"いることを確認するには、 ``stationary()`` メソッドを使って、ロボットが動いているときに "
"``False`` 、1秒以上静止しているときに ``True`` になることをテストします。"

#: of pybricks._common.IMU.settings:16
msgid "The threshold for angular velocity. The default value is 1.5 deg/s."
msgstr "角速度のしきい値。デフォルトは 1.5 deg/s 。"

#: of pybricks._common.IMU.settings:19
msgid "The threshold for angular velocity. The default value is 250 mm/s²."
msgstr "加速度のしきい値。デフォルト値は 250 mm/s² 。"

#: ../../hubs/essentialhub.rst:57 ../../hubs/primehub.rst:99
msgid "Getting the charger status"
msgstr "充電状況の取得"

#: of pybricks._common.Charger.connected:1
msgid "Checks whether a charger is connected via USB."
msgstr "USB を使って充電が行われているかをチエックします。"

#: of pybricks._common.Charger.connected:3
msgid "``True`` if a charger is connected, ``False`` if not."
msgstr "充電が行われていれば ``True`` 、さもなけれな ``False`` を返します。"

#: of pybricks._common.Charger.current:1
msgid "Gets the charging current."
msgstr "充電電流を取得します。"

#: of pybricks._common.Charger.current:3
msgid "Charging current."
msgstr "充電電流。"

#: of pybricks._common.Charger.status:1
msgid ""
"Gets the status of the battery charger, represented by one of the "
"following values. This corresponds to the battery light indicator right "
"next to the USB port."
msgstr ""
"バッテリー充電の状態を取得し、以下のいずれかの値で表す。"
"これは USB ポートのすぐ横にあるバッテリーランプのインジケーターに対応します。"

#: of pybricks._common.Charger.status:5
msgid "Not charging (light is off)."
msgstr "充電中でない(消灯)。"

#: of pybricks._common.Charger.status:6
msgid "Charging (light is red)."
msgstr "充電中(ランプは赤)。"

#: of pybricks._common.Charger.status:7
msgid "Charging is complete (light is green)."
msgstr "充電完了(ランプは緑)。"
msgstr ""

#: of pybricks._common.Charger.status:8
msgid "There is a problem with the charger (light is yellow)."
msgstr "充電に問題がある(黄色に点灯)。"

#: of pybricks._common.Charger.status:10
msgid "Status value."
msgstr "ステータス値。"

#: ../../hubs/essentialhub.rst:65 ../../hubs/primehub.rst:107
msgid "System control"
msgstr "システム制御"

#: ../../hubs/essentialhub.rst:72 ../../hubs/primehub.rst:114
msgid "You can store up to 512 bytes of data on this hub."
msgstr "このハブには最大512バイトのデータを保存できます。"

#: ../../hubs/essentialhub.rst:84
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# ライトの点灯と消灯を５回繰り返す。\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"

#: ../../hubs/essentialhub.rst:90
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Show the color at 30% brightness.\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# Use your own custom color.\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# Go through all the colors.\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# 30% の照度で色を表示。\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# 独自色を使用。\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# すべての色を変化させながら表示。\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"

#: ../../hubs/essentialhub.rst:96
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = EssentialHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# 赤で点滅。\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# 緑の遅い点滅と速い点滅を続ける。\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"

#: ../../hubs/essentialhub.rst:102
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Make an animation with multiple colors.\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# Make the color RED grow faint and bright using a sine pattern.\n"
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# Cycle through a rainbow of colors.\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# 複数の色を使ったアニメーションを行う。\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# 赤をサインカーブのパターンで照度を変えながら表示。
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# 虹色で繰り返しながら表示。\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"

#: ../../hubs/essentialhub.rst:106 ../../hubs/movehub.rst:74
#: ../../hubs/primehub.rst:217 ../../hubs/technichub.rst:98
msgid "IMU examples"
msgstr "IMU の利用例"

#: ../../hubs/essentialhub.rst:99 ../../hubs/movehub.rst:77
#: ../../hubs/primehub.rst:210 ../../hubs/technichub.rst:91
msgid "Testing which way is up"
msgstr "上がどっちかのテスト"

#: ../../hubs/essentialhub.rst:111
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Define colors for each side in a dictionary.\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# Keep updating the color based on detected up side.\n"
"while True:\n"
"\n"
"    # Check which side of the hub is up.\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # Change the color based on the side.\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # Also print the result.\n"
"    print(up_side)\n"
"    wait(50)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# それぞれの側の色を辞書に定義。\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# 検出した側を元に色を更新し続ける。\n"
"while True:\n"
"\n"
"    # ハブの上になっている側をチェック。\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # 検出した側を元に色を変更。\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # 結果の表示も行う。\n"
"    print(up_side)\n"
"    wait(50)\n"

#: ../../hubs/essentialhub.rst:116 ../../hubs/primehub.rst:227
#: ../../hubs/technichub.rst:108
msgid "Reading the tilt value"
msgstr "傾き値の読取り"

#: ../../hubs/essentialhub.rst:118
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"while True:\n"
"    # Read the tilt values.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # Print the result.\n"
"    print(pitch, roll)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"while True:\n"
"    # 傾き値を読み込む。\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # 結果を表示。\n"
"    print(pitch, roll)\n"
"    wait(200)\n"

#: ../../hubs/essentialhub.rst:122 ../../hubs/primehub.rst:233
#: ../../hubs/technichub.rst:114
msgid "Using a custom hub orientation"
msgstr "ハブの向きの変更"

#: ../../hubs/essentialhub.rst:124
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# Initialize the hub. In this case, specify that the hub is mounted with "
"the\n"
"# top side facing forward and the front side facing to the right.\n"
"# For example, this is how the hub is mounted in BLAST in the 51515 set.\n"
"hub = EssentialHub(top_side=Axis.X, front_side=-Axis.Y)\n"
"\n"
"while True:\n"
"    # Read the tilt values. Now, the values are 0 when BLAST stands "
"upright.\n"
"    # Leaning forward gives positive pitch. Leaning right gives positive "
"roll.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # Print the result.\n"
"    print(pitch, roll)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# ハブを初期化。この場合、ハブは上側を前に、前側を右に向けるよう\n"
"# 組み立てているいるように指定します。たとえば、51515セットのBLASTでは\n"
"# そのようになります。\n"
"hub = EssentialHub(top_side=Axis.X, front_side=-Axis.Y)\n"
"\n"
"while True:\n"
"    # 傾きの値を読み取ります。今、BLAST が直立しているときの値は0です。\n"
"    # 前傾姿勢ではピッチがプラスになります。右に傾くとロールがプラスになります。\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # 結果を表示。\n"
"    print(pitch, roll)\n"
"    wait(200)\n"

#: ../../hubs/essentialhub.rst:128 ../../hubs/primehub.rst:239
#: ../../hubs/technichub.rst:120
msgid "Reading acceleration and angular velocity vectors"
msgstr "加速度と角速度ベクトルの読取り"

#: ../../hubs/essentialhub.rst:120
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Get the acceleration vector in g's.\n"
"print(hub.imu.acceleration() / 9810)\n"
"\n"
"# Get the angular velocity vector.\n"
"print(hub.imu.angular_velocity())\n"
"\n"
"# Wait so we can see what we printed\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# 加速度のベクトルを g で取得。\n"
"print(hub.imu.acceleration() / 9810)\n"
"\n"
"# 角速度のベクトルを取得。\n"
"print(hub.imu.angular_velocity())\n"
"\n"
"# 何がプリントされているかが確認できるように待機。\n"
"wait(5000)\n"

#: ../../hubs/essentialhub.rst:134 ../../hubs/primehub.rst:245
#: ../../hubs/technichub.rst:126
msgid "Reading acceleration and angular velocity on one axis"
msgstr "１つの軸の加速度と角速度の読取り"

#: ../../hubs/essentialhub.rst:136
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Get the acceleration or angular_velocity along a single axis.\n"
"# If you need only one value, this is more memory efficient.\n"
"while True:\n"
"\n"
"    # Read the forward acceleration.\n"
"    forward_acceleration = hub.imu.acceleration(Axis.X)\n"
"\n"
"    # Read the yaw rate.\n"
"    yaw_rate = hub.imu.angular_velocity(Axis.Z)\n"
"\n"
"    # Print the yaw rate.\n"
"    print(yaw_rate)\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# 1つの軸に沿った加速度あるいは angular_velocity を取得する。\n"
"# 1つの値しか必要ない場合は、こちらの方がメモリ効率が良い。\n"
"while True:\n"
"\n"
"    # 前方の加速度を読み取る。\n"
"    forward_acceleration = hub.imu.acceleration(Axis.X)\n"
"\n"
"    # ヨーレートを読み取る。\n"
"    yaw_rate = hub.imu.angular_velocity(Axis.Z)\n"
"\n"
"    # ヨーレートを表示。\n"
"    print(yaw_rate)\n"
"    wait(100)\n"

#: ../../hubs/essentialhub.rst:156
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub(broadcast_channel=1)\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブに送るモーター回転角度の読取り。\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # ブロードキャストするデータを設定。まだブロードキャストしていなければ開始。\n"
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信するので、それ以上の頻度で\n"
"    # broadcast() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/essentialhub.rst:162
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub(observe_channels=[1])\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブからのブロードキャストの受信。\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # 過去1秒間にデータが受信されていない。\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # データが受信され、かつ1秒未満の新しいデータ。\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* には、他のハブで hub.ble.broadcast() に指定した\n"
"        # 順序と同じ値が同じ順序で含まれています。\n"
"        left_angle, right_angle = data\n"
"\n"
"        # 他のハブのモーターの位置をこのハブのモーターに反映します。\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信されるので、それ以上の頻度で\n"
"    # observe() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/essentialhub.rst:140 ../../hubs/primehub.rst:251
msgid "System examples"
msgstr "システムの例"

#: ../../hubs/essentialhub.rst:145
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Disable the stop button.\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# Check the button for 5 seconds.\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # Set light to green if pressed, else red.\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# Enable the stop button again.\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# Now you can press the stop button as usual.\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# ストップボタンを無効化。\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# 5秒間のボタンチェック。\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # 押されたら緑、押さてなければ赤でライトを点灯。\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# ストップボタンを再有効化。\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# これで通常どおりストップボタンが使える。\n"
"wait(5000)\n"

#: ../../hubs/essentialhub.rst:151
msgid ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = EssentialHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""
"from pybricks.hubs import EssentialHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = EssentialHub()\n"
"\n"
"# さよならを言い、少し時間をおいて実行する。\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# ハブをシャットダウン。\n"
"hub.system.shutdown()\n"

#: ../../hubs/index.rst:4
msgid ":mod:`hubs <pybricks.hubs>` -- Built-in hub functions"
msgstr ":mod:`hubs <pybricks.hubs>` -- ハブに内蔵の機能"

#: ../../hubs/index.rst
msgid ".. image:: ../main/cad/output/hub-move.png"
msgstr ""

#: ../../hubs/index.rst
msgid ".. image:: ../main/cad/output/hub-technic.png"
msgstr ""

#: ../../hubs/index.rst
msgid ".. image:: ../main/cad/output/hub-inventor.png"
msgstr ""

#: ../../hubs/index.rst
msgid ".. image:: ../main/cad/output/hub-prime.png"
msgstr ""

#: ../../hubs/movehub.rst:4
msgid "Move Hub"
msgstr "ムーブハブ"

msgid ".. image:: ../main/diagrams/movehub.png"
msgstr ""

#: of pybricks.hubs.MoveHub:1
msgid "LEGO® BOOST Move Hub."
msgstr "LEGO® ブースト ムーブハブ。"

#: of pybricks._common.SimpleAccelerometer.acceleration:1
msgid "Gets the acceleration of the device."
msgstr "デバイスの加速度を取得します。"

#: of pybricks._common.SimpleAccelerometer.acceleration:3
msgid "Acceleration along all three axes."
msgstr "3軸すべてのに沿った加速度"

#: ../../hubs/movehub.rst:32
msgid "Changed acceleration units from m/s² to mm/s²."
msgstr "加速度の単位を m/s² から mm/s² に変更しました。"

#: ../../hubs/movehub.rst:64
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# ライトの点灯と消灯を５回繰り返す。\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"

#: ../../hubs/movehub.rst:70
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = MoveHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# 赤で点滅。\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# 緑の遅い点滅と速い点滅を続ける。\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"

#: ../../hubs/movehub.rst:79
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Define colors for each side in a dictionary.\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# Keep updating the color based on detected up side.\n"
"while True:\n"
"\n"
"    # Check which side of the hub is up.\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # Change the color based on the side.\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # Also print the result.\n"
"    print(up_side)\n"
"    wait(50)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# それぞれの側の色を辞書に定義。\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# 検出した側を元に色を更新し続ける。\n"
"while True:\n"
"\n"
"    # ハブの上になっている側をチェック。\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # 検出した側を元に色を変更。\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # 結果の表示も行う。\n"
"    print(up_side)\n"
"    wait(50)\n"

#: ../../hubs/movehub.rst:83
msgid "Reading acceleration"
msgstr "加速度の読取り"

#: ../../hubs/movehub.rst:85
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Get the acceleration tuple.\n"
"print(hub.imu.acceleration())\n"
"\n"
"while True:\n"
"    # Get individual acceleration values.\n"
"    x, y, z = hub.imu.acceleration()\n"
"    print(x, y, z)\n"
"\n"
"    # Wait so we can see what we printed.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# 加速度のタプルを取得。\n"
"print(hub.imu.acceleration())\n"
"\n"
"while True:\n"
"    # 角軸の個別の加速度を取得。\n"
"    x, y, z = hub.imu.acceleration()\n"
"    print(x, y, z)\n"
"\n"
"    # 何がプリントされているかが確認できるように待機。\n"
"    wait(100)\n"

#: ../../hubs/movehub.rst:105
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub(broadcast_channel=1)\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブに送るモーター回転角度の読取り。\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # ブロードキャストするデータを設定。まだブロードキャストしていなければ開始。\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信するので、それ以上の頻度で\n"
"    # broadcast() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/movehub.rst:111
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub(observe_channels=[1])\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブからのブロードキャストの受信。\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # 過去1秒間にデータが受信されていない。\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # データが受信され、かつ1秒未満の新しいデータ。\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* には、他のハブで hub.ble.broadcast() に指定した\n"
"        # 順序と同じ値が同じ順序で含まれています。\n"
"        left_angle, right_angle = data\n"
"\n"
"        # 他のハブのモーターの位置をこのハブのモーターに反映します。\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信されるので、それ以上の頻度で\n"
"    # observe() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/movehub.rst:94
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Disable the stop button.\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# Check the button for 5 seconds.\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # Set light to green if pressed, else red.\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# Enable the stop button again.\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# Now you can press the stop button as usual.\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# ストップボタンを無効化。\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# 5秒間のボタンチェック。\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # 押されたら緑、押さてなければ赤でライトを点灯。\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# ストップボタンを再有効化。\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# これで通常どおりストップボタンが使える。\n"
"wait(5000)\n"

#: ../../hubs/movehub.rst:100
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# さよならを言い、少し時間をおいて実行する。\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# ハブをシャットダウン。\n"
"hub.system.shutdown()\n"

#: ../../hubs/movehub.rst:104
msgid "Making random numbers"
msgstr "乱数の作成"

#: ../../hubs/movehub.rst:106
msgid ""
"The Move Hub does not include the :mod:`urandom` module. If you need "
"random numbers in your application, you can try a variation of the "
"following example."
msgstr ""
"ムーブハブには :mod:`urandom` モジュールがありません。"
"アプリケーションで乱数が必要な場合は、次の例のバリエーションを試してみてください。"

#: ../../hubs/movehub.rst:109
msgid ""
"To make it work better, change the initial value of ``_rand`` to "
"something that is truly random in your application. You could use the IMU"
" acceleration or a sensor value, for example."
msgstr ""
"より良く動作させるためには ``_rand`` の初期値を、アプリケーションで本当にランダムな"
"ものに変更します。例えば、IMUの加速度やセンサーの値が使えます。"

#: ../../hubs/movehub.rst:113
msgid ""
"from pybricks.hubs import MoveHub\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Initialize \"random\" seed.\n"
"_rand = hub.battery.voltage() + hub.battery.current()\n"
"\n"
"\n"
"# Return a random integer N such that a <= N <= b.\n"
"def randint(a, b):\n"
"    global _rand\n"
"    _rand = 75 * _rand % 65537  # Lehmer\n"
"    return _rand * (b - a + 1) // 65537 + a\n"
"\n"
"\n"
"# Generate a few example numbers.\n"
"for i in range(5):\n"
"    print(randint(0, 1000))\n"
msgstr ""
"from pybricks.hubs import MoveHub\n"
"\n"
"# ハブを初期化。\n"
"hub = MoveHub()\n"
"\n"
"# 「乱数」種を初期化。\n"
"_rand = hub.battery.voltage() + hub.battery.current()\n"
"\n"
"\n"
"# a <= N <= b の範囲で乱数の整数値 N を返す。\n"
"def randint(a, b):\n"
"    global _rand\n"
"    _rand = 75 * _rand % 65537  # Lehmer\n"
"    return _rand * (b - a + 1) // 65537 + a\n"
"\n"
"\n"
"# 乱数値をいくつか例として生成。\n"
"for i in range(5):\n"
"    print(randint(0, 1000))\n"

#: ../../hubs/primehub.rst:4
msgid "Prime Hub / Inventor Hub"
msgstr "Spike ラージハブ / Inventor ハブ"

msgid ".. image:: ../main/cad/output/hub-spike-inventor.png"
msgstr ""

#: ../../hubs/primehub.rst:11
msgid ""
"This class is the same as the ``PrimeHub`` class, shown below. Both "
"classes work on both hubs."
msgstr ""
"このクラスは、以下に示す ``PrimeHub`` クラスと同じです。"
"どちらのクラスも両方のハブで動作します。"

#: ../../hubs/primehub.rst:14
msgid "These hubs are completely identical. They use the same Pybricks firmware."
msgstr ""
"これらのハブは完全に同一です。同じ Pybricks ファームウェアを使っています。"

#: of pybricks.hubs.PrimeHub:1
msgid "LEGO® SPIKE Prime Hub."
msgstr "LEGO® SPIKE プライムラージハブ。"

#: of pybricks.hubs.PrimeHub:3
msgid ""
"Initializes the hub. Optionally, specify how the hub is :ref:`placed in "
"your design <robotframe>` by saying in which direction the top side (with"
" the buttons) and front side (with the USB port) are pointing."
msgstr ""
"ハブを初期化します。"
"オプションで、ハブの上面(ボタンのある面)と前面(USBポートのある面)のある向きを指定する"
"ことで、 :ref:`ハブの取付けのデザイン <robotframe>` を反映できます。"

msgid ".. image:: ../main/diagrams/primehub_light.png"
msgstr ""

#: ../../hubs/primehub.rst:33
msgid "Using the light matrix display"
msgstr "ライトマトリクスディスプレイの利用＂

msgid ".. image:: ../main/diagrams/primehub_display.png"
msgstr ""

#: of pybricks._common.LightMatrix.orientation:1
msgid "Sets the orientation of the light matrix display."
msgstr "ライトマトリックスディスプレイの向きを設定します。"

#: of pybricks._common.LightMatrix.orientation:3
msgid ""
"Only new displayed images and pixels are affected. The existing display "
"contents remain unchanged."
msgstr ""
"新しく表示されるイメージとピクセルだけが影響を受けます。既存の表示内容は変更されません。"

#: of pybricks._common.LightMatrix.orientation:6
msgid ""
"Which side of the light matrix display is \"up\" in your design. Choose "
"``Side.TOP``, ``Side.LEFT``, ``Side.RIGHT``, or ``Side.BOTTOM``."
msgstr ""
"ライトマトリクスディスプレイのどの側が「上」になるかを指定します。 "
"``Side.TOP``, ``Side.LEFT``, ``Side.RIGHT``, ``Side.BOTTOM`` のいずれかを"
"指定します。"

#: of pybricks._common.LightMatrix.off:1
msgid "Turns off all the pixels."
msgstr "すべてのピクセルを消灯します。"

#: of pybricks._common.LightMatrix.pixel:1
msgid "Turns on one pixel at the specified brightness."
msgstr "指定の明るさで１つのピクセルを点灯します。

#: of pybricks._common.LightMatrix.pixel:3
msgid "Vertical grid index, starting at 0 from the top."
msgstr "垂直方向のグリッドのインデックス。一番上が 0 になります。"

#: of pybricks._common.LightMatrix.pixel:5
msgid "Horizontal grid index, starting at 0 from the left."
msgstr "水平方向のグリッドインデックス。一番左が 0 になります。"

#: of pybricks._common.LightMatrix.pixel:7
msgid "Brightness of the pixel."
msgstr "ピクセルの明るさ。"

#: of pybricks._common.LightMatrix.icon:1
msgid "Displays an icon, represented by a matrix of :ref:`brightness` values."
msgstr ":ref:`brightness` 値のマトリックスで表現されたアイコンを表示します。"

#: of pybricks._common.LightMatrix.icon:4
msgid "Matrix of intensities (:ref:`brightness`). A 2D list is also accepted."
msgstr ":ref:`brightness` のマトリックス。2次元リストでも可。"

#: of pybricks._common.LightMatrix.animate:1
msgid "Displays an animation made using a list of images."
msgstr "画像のリストで作られたアニメーションを表示します。"

#: of pybricks._common.LightMatrix.animate:3
msgid ""
"Each image has the same format as above. Each image is shown for the "
"given interval. The animation repeats forever while the rest of your "
"program keeps running."
msgstr ""
"各イメージは上記と同じフォーマットです。各イメージは、指定された間隔で表示されます。"
"このアニメーションは、プログラムの残りの部分が実行されている間、永遠に繰り返されます。"

#: of pybricks._common.LightMatrix.animate:7
msgid "Sequence of :class:`Matrix <pybricks.tools.Matrix>` of intensities."
msgstr "照度の :class:`Matrix <pybricks.tools.Matrix>` のシーケンス。"

#: of pybricks._common.LightMatrix.animate:10
msgid "Time to display each image in the list."
msgstr "リストの各イメージを表示する時間。"

#: of pybricks._common.LightMatrix.number:1
msgid "Displays a number in the range -99 to 99."
msgstr "-99 から 99 の範囲の数値を表示します。"

#: of pybricks._common.LightMatrix.number:3
msgid ""
"A minus sign (``-``) is shown as a faint dot in the center of the "
"display. Numbers greater than 99 are shown as ``>``. Numbers less than "
"-99 are shown as ``<``."
msgstr ""
"マイナス記号(``-``)は、ディスプレイの中央に淡いドットで表示します。"
"99 より大きい数値は ``>`` で表示します。-99 より小さい数値は ``<`` で"
"表示します。"

#: of pybricks._common.LightMatrix.number:7
msgid "The number to be displayed."
msgstr "表示する数値。"

#: of pybricks._common.LightMatrix.char:1
msgid ""
"Displays a character or symbol on the light grid. This may be any letter "
"(``a``--``z``), capital letter (``A``--``Z``) or one of the following "
"symbols: ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}``."
msgstr ""
"ライトグリッドに文字や記号を表示します。"
"英小文字 (``a``--``z``)、英大文字 (``A``--``Z``)、記号 "
"symbols: ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}`` "
"のいずれかを指定します。"

#: of pybricks._common.LightMatrix.char:5
msgid "The character or symbol to be displayed."
msgstr "表示する文字または記号。"

#: of pybricks._common.LightMatrix.text:1
msgid ""
"Displays a text string, one character at a time, with a pause between "
"each character. After the last character is shown, all lights turn off."
msgstr ""
"文字列を1文字ずつ表示し、各文字の間にポーズを入れます。"
"最後の文字が表示された後、すべてのライトが消灯します。"

#: of pybricks._common.LightMatrix.text:5
msgid "The text to be displayed."
msgstr "表示する文字列。"

#: of pybricks._common.LightMatrix.text:7
msgid "For how long a character is shown."
msgstr "1文字が表示される時間。"

#: of pybricks._common.LightMatrix.text:9
msgid "For how long the display is off between characters."
msgstr "文字と文字の間の表示を消している時間。"

#: ../../hubs/primehub.rst:54
msgid "Using the buttons"
msgstr "ボタンの利用"

msgid ".. image:: ../main/diagrams/primehub_buttons.png"
msgstr ""

#: ../../hubs/primehub.rst:75
msgid "Using the speaker"
msgstr "スピーカーの利用"

#: of pybricks._common.Speaker.volume:1
msgid "Gets or sets the speaker volume."
msgstr "スピーカーの音量を取得または設定します。"

#: of pybricks._common.Speaker.volume:3
msgid "If no volume is given, this method returns the current volume."
msgstr "音量が指定されない場合、このメソッドは現在の音量を返します。"

#: of pybricks._common.Speaker.volume:5
msgid "Volume of the speaker in the 0-100 range."
msgstr "スピーカーの音量を 0-100 の範囲で指定します。"

#: of pybricks._common.Speaker.beep:1
msgid "Play a beep/tone."
msgstr "ビープ音／トーンを鳴らします。"

#: of pybricks._common.Speaker.beep:3
msgid "Frequency of the beep in the 64-24000 Hz range."
msgstr "ビープ音の周波数を 64-24000 Hzの範囲で指定します。"

#: of pybricks._common.Speaker.beep:5
msgid ""
"Duration of the beep. If the duration is less than 0, then the method "
"returns immediately and the frequency play continues to play "
"indefinitely."
msgstr ""
"ビープ音の継続時間。0 より小さい場合、このメソッドはすぐに戻り、"
"周波数の再生は無期限に行われます。"

#: of pybricks._common.Speaker.play_notes:1
msgid ""
"Plays a sequence of musical notes. For example: ``[\"C4/4\", \"C4/4\", "
"\"G4/4\", \"G4/4\"]``."
msgstr ""
"音符のシーケンスを演奏します。たとえば ``[\"C4/4\", \"C4/4\", "
"\"G4/4\", \"G4/4\"]`` といったものを演奏します。"

#: of pybricks._common.Speaker.play_notes:4
msgid "Each note is a string with the following format:"
msgstr "各音符は次のような形式の文字列です。"

#: of pybricks._common.Speaker.play_notes:6
msgid ""
"The first character is the name of the note, ``A`` to ``G`` or ``R`` for "
"a rest."
msgstr ""
"最初の文字が音名で、 ``A`` から ``G`` で指定します。休符は ``R`` で指定します。"

#: of pybricks._common.Speaker.play_notes:8
msgid ""
"Note names can also include an accidental ``#`` (sharp) or ``b`` (flat). "
"``B#``/``Cb`` and ``E#``/``Fb`` are not allowed."
msgstr ""
"音名には ``#`` (シャープ)または ``b`` (フラット)の調号を含めることもできます。"
"``B#``/``Cb`` and ``E#``/``Fb`` は指定できません。"

#: of pybricks._common.Speaker.play_notes:11
msgid ""
"The note name is followed by the octave number ``2`` to ``8``. For "
"example ``C4`` is middle C. The octave changes to the next number at the "
"note C, for example, ``B3`` is the note below middle C (``C4``)."
msgstr ""
"音名の後にはオクターブ番号2～8が付きます。たとえば ``C4`` はミドルCです。"
"オクターブは音名Cの次の番号で変わります。たとえば ``B3`` はミドルC (``C4``)の"
"下の音です。"

#: of pybricks._common.Speaker.play_notes:15
msgid ""
"The octave is followed by ``/`` and a number that indicates the size of "
"the note. For example ``/4`` is a quarter note, ``/8`` is an eighth note "
"and so on."
msgstr ""
"オクターブの後には ``/`` と音の大きさを表す数字が続きます。たとえば ``/4`` は4分音符、 "
"``/8`` は8分音符となります。"

#: of pybricks._common.Speaker.play_notes:18
msgid ""
"This can optionally followed by a ``.`` to make a dotted note. Dotted "
"notes are 1-1/2 times as long as notes without a dot."
msgstr ""
"この後に ``.`` を付けると付点音符になります。"
"付点音符は、付点なしの音符の1.5倍の長さになります。"

#: of pybricks._common.Speaker.play_notes:21
msgid ""
"The note can optionally end with a ``_`` which is a tie or a slur. This "
"causes there to be no pause between this note and the next note."
msgstr ""
"音符の最後にはタイまたはスラーである ``_`` を付けられます。"
"この場合、この音符と次の音符の間に間がなくなります。"

#: of pybricks._common.Speaker.play_notes:25
msgid "A sequence of notes to be played."
msgstr "演奏する音符のシーケンス。"

#: of pybricks._common.Speaker.play_notes:27
msgid "Beats per minute. A quarter note is one beat."
msgstr "分あたりの拍数。4分音符が1拍です。"

#: ../../hubs/primehub.rst:110
msgid ""
"The examples below use the ``PrimeHub`` class. The examples work fine on "
"both hubs because they are the identical. If you prefer, you can change "
"this to ``InventorHub``."
msgstr ""
"以下の例では ``PrimeHub`` クラスを使っています。"
"サンプルはどちらのハブでも同じなので問題なく動作します。"
"望むのであれば ``InventorHub`` に変更することも可能です。"

#: ../../hubs/primehub.rst:120
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# ライトの点灯と消灯を５回繰り返す。\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"

#: ../../hubs/primehub.rst:126
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Show the color at 30% brightness.\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# Use your own custom color.\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# Go through all the colors.\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 30% の照度で色を表示。\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# 独自の色を使用。\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# すべての色を変化させながら表示。\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"

#: ../../hubs/primehub.rst:132
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = PrimeHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 赤で点滅。\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# 緑の遅い点滅と速い点滅を続ける。\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"

#: ../../hubs/primehub.rst:138
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Make an animation with multiple colors.\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# Make the color RED grow faint and bright using a sine pattern.\n"
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# Cycle through a rainbow of colors.\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 複数色を使ったアニメーションを行う。\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# 赤をサインカーブのパターンで照度を変えながら表示。
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# 虹色で繰り返しながら表示。\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"

#: ../../hubs/primehub.rst:142
msgid "Matrix display examples"
msgstr "マトリクスディスプレイの例"

#: ../../hubs/primehub.rst:145
msgid "Displaying images"
msgstr "イメージの表示"

#: ../../hubs/primehub.rst:147
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Icon\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Display a big arrow pointing up.\n"
"hub.display.icon(Icon.UP)\n"
"\n"
"# Wait so we can see what is displayed.\n"
"wait(2000)\n"
"\n"
"# Display a heart at half brightness.\n"
"hub.display.icon(Icon.HEART / 2)\n"
"\n"
"# Wait so we can see what is displayed.\n"
"wait(2000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Icon\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 上を指す大きな矢印の表示。\n"
"hub.display.icon(Icon.UP)\n"
"\n"
"# 何が表示されているかが確認できるように待機する。\n"
"wait(2000)\n"
"\n"
"# ハートを半分の照度で表示。\n"
"hub.display.icon(Icon.HEART / 2)\n"
"\n"
"# 何が表示されているかが確認できるように待機する。\n"
"wait(2000)\n"

#: ../../hubs/primehub.rst:151
msgid "Displaying numbers"
msgstr "数値の表示"

#: ../../hubs/primehub.rst:153
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Count from 0 to 99.\n"
"for i in range(100):\n"
"    hub.display.number(i)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 0 から 99 までカウント。\n"
"for i in range(100):\n"
"    hub.display.number(i)\n"
"    wait(200)\n"

#: ../../hubs/primehub.rst:157
msgid "Displaying text"
msgstr "テキストの表示"

#: ../../hubs/primehub.rst:159
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Display the letter A for two seconds.\n"
"hub.display.char(\"A\")\n"
"wait(2000)\n"
"\n"
"# Display text, one letter at a time.\n"
"hub.display.text(\"Hello, world!\")\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 文字 A を２秒間表示。\n"
"hub.display.char(\"A\")\n"
"wait(2000)\n"
"\n"
"# １文字ずつテキストを表示。\n"
"hub.display.text(\"Hello, world!\")\n"

#: ../../hubs/primehub.rst:163
msgid "Displaying individual pixels"
msgstr "個別のピクセルの表示"

#: ../../hubs/primehub.rst:165
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Turn on the pixel at row 1, column 2.\n"
"hub.display.pixel(1, 2)\n"
"wait(2000)\n"
"\n"
"# Turn on the pixel at row 2, column 4, at 50% brightness.\n"
"hub.display.pixel(2, 4, 50)\n"
"wait(2000)\n"
"\n"
"# Turn off the pixel at row 1, column 2.\n"
"hub.display.pixel(1, 2, 0)\n"
"wait(2000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 行 1、列 2 のピクセルを点灯。\n"
"hub.display.pixel(1, 2)\n"
"wait(2000)\n"
"\n"
"# 行 2、列 4 のピクセルを照度 50% で点灯。\n"
"hub.display.pixel(2, 4, 50)\n"
"wait(2000)\n"
"\n"
"# 行 1、列 2 のピクセルを消灯。\n"
"hub.display.pixel(1, 2, 0)\n"
"wait(2000)\n"

#: ../../hubs/primehub.rst:169
msgid "Changing the display orientation"
msgstr "ディスプレイ向きの変更"

#: ../../hubs/primehub.rst:171
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Side\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Rotate the display. Now right is up.\n"
"hub.display.orientation(up=Side.RIGHT)\n"
"\n"
"# Display a number. This will be shown sideways.\n"
"hub.display.number(23)\n"
"\n"
"# Wait so we can see what is displayed.\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Side\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# ディスプレイを回転。右側を上に変更。\n"
"hub.display.orientation(up=Side.RIGHT)\n"
"\n"
"# 数値を表示。これは横向きに表示されます。\n"
"hub.display.number(23)\n"
"\n"
"# 何が表示されているかが確認できるように待機する。\n"
"wait(10000)\n"

#: ../../hubs/primehub.rst:174
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Icon\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"while True:\n"
"\n"
"    # Check which side of the hub is up.\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # Use this side to set the display orientation.\n"
"    hub.display.orientation(up_side)\n"
"\n"
"    # Display something, like an arrow.\n"
"    hub.display.icon(Icon.UP)\n"
"\n"
"    wait(10)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Icon\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"while True:\n"
"\n"
"    # ハブの上になっている側をチェック。\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # チェックした向きに、ディスプレイ向きを設定。\n"
"    hub.display.orientation(up_side)\n"
"\n"
"    # 何かを表示する。矢印など。\n"
"    hub.display.icon(Icon.UP)\n"
"\n"
"    wait(10)\n"

#: ../../hubs/primehub.rst:180
msgid "Making your own images"
msgstr "独自イメージの作成"

#: ../../hubs/primehub.rst:182
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait, Matrix\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Make a square that is bright on the outside and faint in the middle.\n"
"SQUARE = Matrix(\n"
"    [\n"
"        [100, 100, 100, 100, 100],\n"
"        [100, 50, 50, 50, 100],\n"
"        [100, 50, 0, 50, 100],\n"
"        [100, 50, 50, 50, 100],\n"
"        [100, 100, 100, 100, 100],\n"
"    ]\n"
")\n"
"\n"
"# Display the square.\n"
"hub.display.icon(SQUARE)\n"
"wait(3000)\n"
"\n"
"# Make an image using a Python list comprehension. In this image, the\n"
"# brightness of each pixel is the sum of the row and column index. So the"
"\n"
"# light is faint in the top left and bright in the bottom right.\n"
"GRADIENT = Matrix([[(r + c) for c in range(5)] for r in range(5)]) * 12.5"
"\n"
"\n"
"# Display the generated gradient.\n"
"hub.display.icon(GRADIENT)\n"
"wait(3000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait, Matrix\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 外側が明るく、真ん中がうすくなるような正方形を作成。\n"
"SQUARE = Matrix(\n"
"    [\n"
"        [100, 100, 100, 100, 100],\n"
"        [100, 50, 50, 50, 100],\n"
"        [100, 50, 0, 50, 100],\n"
"        [100, 50, 50, 50, 100],\n"
"        [100, 100, 100, 100, 100],\n"
"    ]\n"
")\n"
"\n"
"# 正方形を表示。\n"
"hub.display.icon(SQUARE)\n"
"wait(3000)\n"
"\n"
"# Python のリスト内包を使った画像を作成。このイメージで、各ピクセルの\n"
"# 明るさは行と列のインデックスの和になります。つまり、左上は淡く、\n"
"# 右下は明るくなります。\n"
"GRADIENT = Matrix([[(r + c) for c in range(5)] for r in range(5)]) * 12.5"
"\n"
"\n"
"# 作成したグラデーションを表示する。\n"
"hub.display.icon(GRADIENT)\n"
"wait(3000)\n"

#: ../../hubs/primehub.rst:186
msgid "Combining icons to make expressions"
msgstr "アイコンを組み合わせた表現"

#: ../../hubs/primehub.rst:188
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Icon, Side\n"
"from pybricks.tools import wait\n"
"\n"
"from urandom import randint\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"hub.display.orientation(up=Side.RIGHT)\n"
"\n"
"while True:\n"
"\n"
"    # Start with random left brow: up or down.\n"
"    if randint(0, 100) < 70:\n"
"        brows = Icon.EYE_LEFT_BROW * 0.5\n"
"    else:\n"
"        brows = Icon.EYE_LEFT_BROW_UP * 0.5\n"
"\n"
"    # Add random right brow: up or down.\n"
"    if randint(0, 100) < 70:\n"
"        brows += Icon.EYE_RIGHT_BROW * 0.5\n"
"    else:\n"
"        brows += Icon.EYE_RIGHT_BROW_UP * 0.5\n"
"\n"
"    for i in range(3):\n"
"        # Display eyes open plus the random brows.\n"
"        hub.display.icon(Icon.EYE_LEFT + Icon.EYE_RIGHT + brows)\n"
"        wait(2000)\n"
"\n"
"        # Display eyes blinked plus the random brows.\n"
"        hub.display.icon(Icon.EYE_LEFT_BLINK * 0.7 + Icon.EYE_RIGHT_BLINK"
" * 0.7 + brows)\n"
"        wait(200)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Icon, Side\n"
"from pybricks.tools import wait\n"
"\n"
"from urandom import randint\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"hub.display.orientation(up=Side.RIGHT)\n"
"\n"
"while True:\n"
"\n"
"    # 左の眉毛を上か下か、ランダムでスタート。\n"
"    if randint(0, 100) < 70:\n"
"        brows = Icon.EYE_LEFT_BROW * 0.5\n"
"    else:\n"
"        brows = Icon.EYE_LEFT_BROW_UP * 0.5\n"
"\n"
"    # 左の眉毛を上か下か、ランダムで追加。\n"
"    if randint(0, 100) < 70:\n"
"        brows += Icon.EYE_RIGHT_BROW * 0.5\n"
"    else:\n"
"        brows += Icon.EYE_RIGHT_BROW_UP * 0.5\n"
"\n"
"    for i in range(3):\n"
"        # 目を見開いて、ランダムな眉毛を表示。\n"
"        hub.display.icon(Icon.EYE_LEFT + Icon.EYE_RIGHT + brows)\n"
"        wait(2000)\n"
"\n"
"        # 瞬いだ目+無造作な眉毛を表示。\n"
"        hub.display.icon(Icon.EYE_LEFT_BLINK * 0.7 + Icon.EYE_RIGHT_BLINK"
" * 0.7 + brows)\n"
"        wait(200)\n"

#: ../../hubs/primehub.rst:192
msgid "Displaying animations"
msgstr "アニメーションの表示"

#: ../../hubs/primehub.rst:194
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Icon\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Turn the hub light off (optional).\n"
"hub.light.off()\n"
"\n"
"# Create a list of intensities from 0 to 100 and back.\n"
"brightness = list(range(0, 100, 4)) + list(range(100, 0, -4))\n"
"\n"
"# Create an animation of the heart icon with changing brightness.\n"
"hub.display.animate([Icon.HEART * i / 100 for i in brightness], 30)\n"
"\n"
"# The animation repeats in the background. Here we just wait.\n"
"while True:\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Icon\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# ハブのライトを消灯(オプション)。\n"
"hub.light.off()\n"
"\n"
"# 0から100まで、100から0までの照度のリストを作成。\n"
"brightness = list(range(0, 100, 4)) + list(range(100, 0, -4))\n"
"\n"
"# 照度を変えながらハートのアイコンをアニメーション表示。\n"
"hub.display.animate([Icon.HEART * i / 100 for i in brightness], 30)\n"
"\n"
"# バックグラウンドでアニメーションを繰り返す。ここでは待機するだけ。\n"
"while True:\n"
"    wait(100)\n"

#: ../../hubs/primehub.rst:198
msgid "Button examples"
msgstr "ボタンの例"

#: ../../hubs/primehub.rst:201
msgid "Detecting button presses"
msgstr "ボタン押下の検出"

#: ../../hubs/primehub.rst:203
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Button, Icon\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Wait for any button to be pressed, and save the result.\n"
"pressed = []\n"
"while not any(pressed):\n"
"    pressed = hub.buttons.pressed()\n"
"    wait(10)\n"
"\n"
"# Display a circle.\n"
"hub.display.icon(Icon.CIRCLE)\n"
"\n"
"# Wait for all buttons to be released.\n"
"while any(hub.buttons.pressed()):\n"
"    wait(10)\n"
"\n"
"# Display an arrow to indicate which button was pressed.\n"
"if Button.LEFT in pressed:\n"
"    hub.display.icon(Icon.ARROW_LEFT_DOWN)\n"
"elif Button.RIGHT in pressed:\n"
"    hub.display.icon(Icon.ARROW_RIGHT_DOWN)\n"
"elif Button.BLUETOOTH in pressed:\n"
"    hub.display.icon(Icon.ARROW_RIGHT_UP)\n"
"\n"
"wait(3000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Button, Icon\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# ボタンのどれかが押されるまで待機し、その結果を保存。\n"
"pressed = []\n"
"while not any(pressed):\n"
"    pressed = hub.buttons.pressed()\n"
"    wait(10)\n"
"\n"
"# 円を表示。\n"
"hub.display.icon(Icon.CIRCLE)\n"
"\n"
"# すべてのボタンを離すまで待機。\n"
"while any(hub.buttons.pressed()):\n"
"    wait(10)\n"
"\n"
"# どのボタンが押されていたのかを示す矢印を表示。\n"
"if Button.LEFT in pressed:\n"
"    hub.display.icon(Icon.ARROW_LEFT_DOWN)\n"
"elif Button.RIGHT in pressed:\n"
"    hub.display.icon(Icon.ARROW_RIGHT_DOWN)\n"
"elif Button.BLUETOOTH in pressed:\n"
"    hub.display.icon(Icon.ARROW_RIGHT_UP)\n"
"\n"
"wait(3000)\n"

#: ../../hubs/primehub.rst:212
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Define colors for each side in a dictionary.\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# Keep updating the color based on detected up side.\n"
"while True:\n"
"\n"
"    # Check which side of the hub is up.\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # Change the color based on the side.\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # Also print the result.\n"
"    print(up_side)\n"
"    wait(50)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# それぞれの側の色を辞書に定義。\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# 検出した側を元に色を更新し続ける。\n"
"while True:\n"
"\n"
"    # ハブの上になっている側をチェック。\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # 検出した側を元に色を変更。\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # 結果の表示も行う。\n"
"    print(up_side)\n"
"    wait(50)\n"

#: ../../hubs/primehub.rst:219
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"while True:\n"
"    # Read the tilt values.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # Print the result.\n"
"    print(pitch, roll)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"while True:\n"
"    # 傾き値を読み込む。\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # 結果を表示。\n"
"    print(pitch, roll)\n"
"    wait(200)\n"

#: ../../hubs/primehub.rst:225
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# Initialize the hub. In this case, specify that the hub is mounted with "
"the\n"
"# top side facing forward and the front side facing to the right.\n"
"# For example, this is how the hub is mounted in BLAST in the 51515 set.\n"
"hub = PrimeHub(top_side=Axis.X, front_side=-Axis.Y)\n"
"\n"
"while True:\n"
"    # Read the tilt values. Now, the values are 0 when BLAST stands "
"upright.\n"
"    # Leaning forward gives positive pitch. Leaning right gives positive "
"roll.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # Print the result.\n"
"    print(pitch, roll)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# ハブを初期化。この場合、ハブは上側を前に、前側を右に向けるよう\n"
"# 組み立てているいるように指定します。たとえば、51515セットのBLASTでは\n"
"# そのようになります。\n"
"hub = PrimeHub(top_side=Axis.X, front_side=-Axis.Y)\n"
"\n"
"while True:\n"
"    # 傾きの値を読み取ります。今、BLAST が直立しているときの値は0です。\n"
"    # 前傾姿勢ではピッチがプラスになります。右に傾くとロールがプラスになります。\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # 結果を表示。\n"
"    print(pitch, roll)\n"
"    wait(200)\n"

#: ../../hubs/primehub.rst:231
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Get the acceleration vector in g's.\n"
"print(hub.imu.acceleration() / 9810)\n"
"\n"
"# Get the angular velocity vector.\n"
"print(hub.imu.angular_velocity())\n"
"\n"
"# Wait so we can see what we printed\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 加速度のベクトルを g で取得。\n"
"print(hub.imu.acceleration() / 9810)\n"
"\n"
"# 角速度のベクトルを取得。\n"
"print(hub.imu.angular_velocity())\n"
"\n"
"# 何がプリントされているかが確認できるように待機。\n"
"wait(5000)\n"

#: ../../hubs/primehub.rst:237
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Get the acceleration or angular_velocity along a single axis.\n"
"# If you need only one value, this is more memory efficient.\n"
"while True:\n"
"\n"
"    # Read the forward acceleration.\n"
"    forward_acceleration = hub.imu.acceleration(Axis.X)\n"
"\n"
"    # Read the yaw rate.\n"
"    yaw_rate = hub.imu.angular_velocity(Axis.Z)\n"
"\n"
"    # Print the yaw rate.\n"
"    print(yaw_rate)\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# 1つの軸に沿った加速度あるいは angular_velocity を取得する。\n"
"# 1つの値しか必要ない場合は、こちらの方がメモリ効率が良い。\n"
"while True:\n"
"\n"
"    # 前方の加速度を読み取る。\n"
"    forward_acceleration = hub.imu.acceleration(Axis.X)\n"
"\n"
"    # ヨーレートを読み取る。\n"
"    yaw_rate = hub.imu.angular_velocity(Axis.Z)\n"
"\n"
"    # ヨーレートを表示。\n"
"    print(yaw_rate)\n"
"    wait(100)\n"

#: ../../hubs/primehub.rst:267
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub(broadcast_channel=1)\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブに送るモーター回転角度の読取り。\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # ブロードキャストするデータを設定。まだブロードキャストしていなければ開始。\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信するので、それ以上の頻度で\n"
"    # broadcast() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/primehub.rst:273
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub(observe_channels=[1])\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブからのブロードキャストの受信。\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # 過去1秒間にデータが受信されていない。\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # データが受信され、かつ1秒未満の新しいデータ。\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* には、他のハブで hub.ble.broadcast() に指定した\n"
"        # 順序と同じ値が同じ順序で含まれています。\n"
"        left_angle, right_angle = data\n"
"\n"
"        # 他のハブのモーターの位置をこのハブのモーターに反映します。\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信されるので、それ以上の頻度で\n"
"    # observe() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/primehub.rst:281
msgid "Changing the stop button combination"
msgstr "ストップボタンの組合わせの変更"

#: ../../hubs/primehub.rst:246
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Button\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Configure the stop button combination. Now, your program stops\n"
"# if you press the center and Bluetooth buttons simultaneously.\n"
"hub.system.set_stop_button((Button.CENTER, Button.BLUETOOTH))\n"
"\n"
"# Now we can use the center button as a normal button.\n"
"while True:\n"
"\n"
"    # Play a sound if the center button is pressed.\n"
"    if Button.CENTER in hub.buttons.pressed():\n"
"        hub.speaker.beep()\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.parameters import Button\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# ストップボタンの組合わせを設定。これで、センターボタンと Bluetooth\n"
"# ボタンを同時に押すと、プログラムが停止。\n"
"hub.system.set_stop_button((Button.CENTER, Button.BLUETOOTH))\n"
"\n"
"# これでセンターボタンを普通のボタンとして利用できるようになる。\n"
"while True:\n"
"\n"
"    # センターボタンを押したら音が鳴らす。\n"
"    if Button.CENTER in hub.buttons.pressed():\n"
"        hub.speaker.beep()\n"

#: ../../hubs/primehub.rst:252
msgid ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = PrimeHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""
"from pybricks.hubs import PrimeHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = PrimeHub()\n"
"\n"
"# さよならを言い、少し時間をおいて実行する。\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# ハブをシャットダウン。\n"
"hub.system.shutdown()\n"

#: ../../hubs/technichub.rst:4
msgid "Technic Hub"
msgstr "テクニックハブ"

#: of pybricks.hubs.TechnicHub:1
msgid "LEGO® Technic Hub."
msgstr "LEGO® テクニックハブ。"

#: of pybricks.hubs.TechnicHub:3
msgid ""
"Initializes the hub. Optionally, specify how the hub is :ref:`placed in "
"your design <robotframe>` by saying in which direction the top side (with"
" the button) and front side (with the light) are pointing."
msgstr ""
"ハブを初期化します。オプションで、上面(ボタン付き)と前面(ライト付き)の向きを"
"指定することで、 :ref:`ハブの取付けのデザイン <robotframe>` を反映できます。"

#: ../../hubs/technichub.rst:66
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# ライトの点灯と消灯を５回繰り返す。\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"

#: ../../hubs/technichub.rst:72
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Show the color at 30% brightness.\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# Use your own custom color.\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# Go through all the colors.\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# 30% の照度で色を表示。\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# 独自の色を使用。\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# すべての色を変化させながら表示。\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"

#: ../../hubs/technichub.rst:78
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = TechnicHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# 赤で点滅。\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# 緑の遅い点滅と速い点滅を続ける。\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"

#: ../../hubs/technichub.rst:84
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Make an animation with multiple colors.\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# Make the color RED grow faint and bright using a sine pattern.\n"
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# Cycle through a rainbow of colors.\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# 複数色を使ったアニメーションを行う。\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# 赤をサインカーブのパターンで照度を変えながら表示。
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# 虹色で繰り返しながら表示。\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"

#: ../../hubs/technichub.rst:93
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Define colors for each side in a dictionary.\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# Keep updating the color based on detected up side.\n"
"while True:\n"
"\n"
"    # Check which side of the hub is up.\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # Change the color based on the side.\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # Also print the result.\n"
"    print(up_side)\n"
"    wait(50)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# それぞれの側の色を辞書に定義。\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# 検出した側を元に色を更新し続ける。\n"
"while True:\n"
"\n"
"    # ハブの上になっている側をチェック。\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # 検出した側を元に色を変更。\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # 結果の表示も行う。\n"
"    print(up_side)\n"
"    wait(50)\n"

#: ../../hubs/technichub.rst:100
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"while True:\n"
"    # Read the tilt values.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # Print the result.\n"
"    print(pitch, roll)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"while True:\n"
"    # 傾き値を読み込む。\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # 結果を表示。\n"
"    print(pitch, roll)\n"
"    wait(200)\n"

#: ../../hubs/technichub.rst:106
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# Initialize the hub. In this case, specify that the hub is mounted with "
"the\n"
"# top side facing forward and the front side facing to the right.\n"
"# For example, this is how the hub is mounted in BLAST in the 51515 set.\n"
"hub = TechnicHub(top_side=Axis.X, front_side=-Axis.Y)\n"
"\n"
"while True:\n"
"    # Read the tilt values. Now, the values are 0 when BLAST stands "
"upright.\n"
"    # Leaning forward gives positive pitch. Leaning right gives positive "
"roll.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # Print the result.\n"
"    print(pitch, roll)\n"
"    wait(200)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# ハブを初期化。この場合、ハブは上側を前に、前側を右に向けるよう\n"
"# 組み立てているいるように指定します。たとえば、51515セットのBLASTでは\n"
"# そのようになります。\n"
"hub = TechnicHub(top_side=Axis.X, front_side=-Axis.Y)\n"
"\n"
"while True:\n"
"    # 傾きの値を読み取ります。今、BLAST が直立しているときの値は0です。\n"
"    # 前傾姿勢ではピッチがプラスになります。右に傾くとロールがプラスになります。\n"
"roll.\n"
"    pitch, roll = hub.imu.tilt()\n"
"\n"
"    # 結果を表示。\n"
"    print(pitch, roll)\n"
"    wait(200)\n"

#: ../../hubs/technichub.rst:112
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Get the acceleration vector in g's.\n"
"print(hub.imu.acceleration() / 9810)\n"
"\n"
"# Get the angular velocity vector.\n"
"print(hub.imu.angular_velocity())\n"
"\n"
"# Wait so we can see what we printed\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# 加速度のベクトルを g で取得。\n"
"print(hub.imu.acceleration() / 9810)\n"
"\n"
"# 角速度のベクトルを取得。\n"
"print(hub.imu.angular_velocity())\n"
"\n"
"# 何がプリントされているかが確認できるように待機。\n"
"wait(5000)\n"

#: ../../hubs/technichub.rst:118
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Get the acceleration or angular_velocity along a single axis.\n"
"# If you need only one value, this is more memory efficient.\n"
"while True:\n"
"\n"
"    # Read the forward acceleration.\n"
"    forward_acceleration = hub.imu.acceleration(Axis.X)\n"
"\n"
"    # Read the yaw rate.\n"
"    yaw_rate = hub.imu.angular_velocity(Axis.Z)\n"
"\n"
"    # Print the yaw rate.\n"
"    print(yaw_rate)\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"from pybricks.parameters import Axis\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# 1つの軸に沿った加速度あるいは angular_velocity を取得する。\n"
"# 1つの値しか必要ない場合は、こちらの方がメモリ効率が良い。\n"
"while True:\n"
"\n"
"    # 前方の加速度を読み取る。\n"
"    forward_acceleration = hub.imu.acceleration(Axis.X)\n"
"\n"
"    # ヨーレートを読み取る。\n"
"    yaw_rate = hub.imu.angular_velocity(Axis.Z)\n"
"\n"
"    # ヨーレートを表示。\n"
"    print(yaw_rate)\n"
"    wait(100)\n"

#: ../../hubs/technichub.rst:148
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub(broadcast_channel=1)\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブに送るモーター回転角度の読取り。\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # ブロードキャストするデータを設定。まだブロードキャストしていなければ開始。\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信するので、それ以上の頻度で\n"
"    # broadcast() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/technichub.rst:154
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub(observe_channels=[1])\n"
"\n"
"# モーターを初期化。\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # 他のハブからのブロードキャストの受信。\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # 過去1秒間にデータが受信されていない。\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # データが受信され、かつ1秒未満の新しいデータ。\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* には、他のハブで hub.ble.broadcast() に指定した\n"
"        # 順序と同じ値が同じ順序で含まれています。\n"
"        left_angle, right_angle = data\n"
"\n"
"        # 他のハブのモーターの位置をこのハブのモーターに反映します。\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # ブロードキャストは100ミリ秒ごとにのみ送信されるので、それ以上の頻度で\n"
"    # observe() メソッドを呼び出す理由はありません。\n"
"    wait(100)\n"

#: ../../hubs/technichub.rst:127
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Disable the stop button.\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# Check the button for 5 seconds.\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # Set light to green if pressed, else red.\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# Enable the stop button again.\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# Now you can press the stop button as usual.\n"
"wait(5000)\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# ストップボタンを無効化。\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# 5秒間のボタンチェック。\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # 押されたら緑、押さてなければ赤でライトを点灯。\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# ストップボタンを再有効化。\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# これで通常どおりストップボタンが使える。\n"
"wait(5000)\n"

#: ../../hubs/technichub.rst:133
msgid ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = TechnicHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""
"from pybricks.hubs import TechnicHub\n"
"from pybricks.tools import wait\n"
"\n"
"# ハブを初期化。\n"
"hub = TechnicHub()\n"
"\n"
"# さよならを言い、少し時間をおいて実行する。\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# ハブをシャットダウン。\n"
"hub.system.shutdown()\n"

