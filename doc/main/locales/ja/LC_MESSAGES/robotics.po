# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2023 The Pybricks Authors
# This file is distributed under the same license as the pybricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybricks v3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-11 20:29+0900\n"
"PO-Revision-Date: 2024-02-11 21:36+0900\n"
"Last-Translator: Minoru INACHI\n"
"Language-Team: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../robotics.rst:2
msgid ":mod:`robotics <pybricks.robotics>` -- Robotics and drive bases"
msgstr ":mod:`robotics <pybricks.robotics>` -- ロボティクスとドライブベース"

#: of pybricks.robotics:1
msgid "Robotics module for the Pybricks API."
msgstr "Pybricks API 用のロボティクスモジュール"

#: of pybricks.robotics.DriveBase:1
msgid ""
"A robotic vehicle with two powered wheels and an optional support wheel "
"or caster."
msgstr ""
"2つの動力車輪と、オプションで補助輪やキャスターを持つロボット車両。"

#: of pybricks.robotics.DriveBase:4
msgid ""
"By specifying the dimensions of your robot, this class makes it easy to "
"drive a given distance in millimeters or turn by a given number of "
"degrees."
msgstr ""
"ロボットの寸法を指定することで、指定した距離をミリメートル単位で駆動したり、"
"指定した角度だけ旋回したりすることが簡単にできるクラスです。"

#: of pybricks.robotics.DriveBase:8
msgid ""
"**Positive** distances, radii, or drive speeds mean driving **forward**. "
"**Negative** means **backward**."
msgstr ""
"距離、半径、駆動速度が **正** の場合は **前進** を意味し、 **負** の場合は "
"**後進** を意味します。"

#: of pybricks.robotics.DriveBase:11
msgid ""
"**Positive** angles and turn rates mean turning **right**. **Negative** "
"means **left**. So when viewed from the top, positive means clockwise and"
" negative means counterclockwise."
msgstr ""
"角度や旋回速度が **正** の場合は、右に曲がることを意味します。 **負** の場合は"
"左回りを意味します。つまり、上から見て、プラスは時計回り、マイナスは反時計回りを"
"意味します。"

#: of pybricks.robotics.DriveBase:15
msgid ""
"See the `measuring`_ section for tips to measure and adjust the diameter "
"and axle track values."
msgstr ""
"直径と軸の軌跡の値を測定して調整するコツは `measuring`_ の章を参照してください。"

#: of pybricks.robotics.DriveBase pybricks.robotics.DriveBase.curve
#: pybricks.robotics.DriveBase.drive pybricks.robotics.DriveBase.settings
#: pybricks.robotics.DriveBase.straight pybricks.robotics.DriveBase.turn
msgid "Parameters"
msgstr "パラメータ"

#: of pybricks.robotics.DriveBase:18
msgid "The motor that drives the left wheel."
msgstr "左車輪を駆動するモーター。"

#: of pybricks.robotics.DriveBase:20
msgid "The motor that drives the right wheel."
msgstr "右の車輪を駆動するモーター。"

#: of pybricks.robotics.DriveBase:22
msgid "Diameter of the wheels."
msgstr "車輪の直径。"

#: of pybricks.robotics.DriveBase:24
msgid "Distance between the points where both wheels touch the ground."
msgstr "両輪が地面に接しているところの間の距離。"

#: ../../robotics.rst:13
msgid "Driving by a given distance or angle"
msgstr "指定の距離または角度で走行させる方法"

#: ../../robotics.rst:14
msgid ""
"Use the following commands to drive a given distance, or turn by a given "
"angle."
msgstr ""
"次のコマンドを使用すると、指定した距離だけ走行したり、指定した角度だけ旋回したり"
"することができます。"

#: ../../robotics.rst:17
msgid ""
"This is measured using the internal rotation sensors. Because wheels may "
"slip while moving, the traveled distance and angle are only estimates."
msgstr ""
"これは内部の回転センサーで測定しています。移動中に車輪が滑ることがあるので、"
"移動距離や角度はあくまで目安です。"

#: of pybricks.robotics.DriveBase.straight:1
msgid "Drives straight for a given distance and then stops."
msgstr "一定距離直進した後、停止します。"

#: of pybricks.robotics.DriveBase.straight:3
msgid "Distance to travel"
msgstr "移動する距離"

#: of pybricks.robotics.DriveBase.curve:7
#: pybricks.robotics.DriveBase.straight:5 pybricks.robotics.DriveBase.turn:5
msgid "What to do after coming to a standstill."
msgstr "停止した後の挙動。"

#: of pybricks.robotics.DriveBase.curve:9
#: pybricks.robotics.DriveBase.straight:7 pybricks.robotics.DriveBase.turn:7
msgid ""
"Wait for the maneuver to complete before continuing with the rest of the "
"program."
msgstr ""
"動作が完了するのを待ってから、プログラムの続きを実行するのかの指定。"

#: of pybricks.robotics.DriveBase.turn:1
msgid "Turns in place by a given angle and then stops."
msgstr "指定の角度だけその場で回転し、停止する。"

#: of pybricks.robotics.DriveBase.turn:3
msgid "Angle of the turn."
msgstr "回転する角度。"

#: of pybricks.robotics.DriveBase.curve:1
msgid "Drives an arc along a circle of a given radius, by a given angle."
msgstr "指定の半径の円に沿って、指定の角度で円弧状に駆動します。"

#: of pybricks.robotics.DriveBase.curve:3
msgid "Radius of the circle."
msgstr "円の半径。"

#: of pybricks.robotics.DriveBase.curve:5
msgid "Angle along the circle."
msgstr "円に沿った角度。"

#: of pybricks.robotics.DriveBase.settings:1
msgid "Configures the drive base speed and acceleration."
msgstr "ドライブベースの速度と加速度を設定します。"

#: of pybricks.robotics.DriveBase.settings:3
msgid "If you give no arguments, this returns the current values as a tuple."
msgstr "引数を与えない場合は、現在の値をタプルとして返します。"

#: of pybricks.robotics.DriveBase.settings:5
#, python-format
msgid ""
"The initial values are automatically configured based on your wheel "
"diameter and axle track. They are selected such that your robot drives at"
" about 40% of its maximum speed."
msgstr ""
"初期値は、車輪の直径と車軸の軌跡に基づいて自動的に設定されます。"
"ロボットが最大速度の約40%で駆動するよう設定されています。"

#: of pybricks.robotics.DriveBase.settings:9
msgid ""
"The speed values given here do not apply to the :meth:`.drive` method, "
"since you provide your own speed values as arguments in that method."
msgstr ""
":meth:`.drive` メソッドでは、独自の速度値を引数で指定するので、"
"これで設定した速度値は適用されません。"

#: of pybricks.robotics.DriveBase.settings:12
msgid "Straight-line speed of the robot."
msgstr "ロボットの前進速度。"

#: of pybricks.robotics.DriveBase.settings:14
msgid ""
"Straight-line acceleration and deceleration of the robot. Provide a tuple"
" with two values to set acceleration and deceleration separately."
msgstr ""
"ロボットの前進加速度および減速度。"
"加速度と減速度を別々に設定するために、2つの値を持つタプルを指定します。"

#: of pybricks.robotics.DriveBase.drive:6
#: pybricks.robotics.DriveBase.settings:18
msgid "Turn rate of the robot."
msgstr "ロボットの旋回速度。"

#: of pybricks.robotics.DriveBase.settings:20
msgid ""
"Angular acceleration and deceleration of the robot. Provide a tuple with "
"two values to set acceleration and deceleration separately."
msgstr ""
"ロボットの角度加速度・減速度。"
"加速度と減速度を別々に設定するために、2つの値を持つタプルを指定します。"

#: of pybricks.robotics.DriveBase.done:1
msgid "Checks if an ongoing command or maneuver is done."
msgstr "進行中のコマンドや動作が行われているかどうかをチェックします。"

#: of pybricks.robotics.DriveBase.angle pybricks.robotics.DriveBase.distance
#: pybricks.robotics.DriveBase.done pybricks.robotics.DriveBase.stalled
#: pybricks.robotics.DriveBase.state
msgid "Returns"
msgstr "戻り値"

#: of pybricks.robotics.DriveBase.done:3
msgid "``True`` if the command is done, ``False`` if not."
msgstr "コマンドが完了した場合は ``True`` 、完了していない場合は ``False`` 。"

#: ../../robotics.rst:31
msgid "Drive forever"
msgstr "永久駆動"

#: ../../robotics.rst:32
msgid "Use :meth:`.drive` to begin driving at a desired speed and steering."
msgstr ":meth:`.drive` を使って、任意の速度とステアリングで走行を開始します。"

#: ../../robotics.rst:34
msgid ""
"It keeps going until you use :meth:`.stop` or change course by using "
":meth:`.drive` again. For example, you can drive until a sensor is "
"triggered and then stop or turn around."
msgstr ""
":meth:`.stop` を使うか、もう一度 :meth:`.drive` を使って進路を変更するまで"
"走り続けます。たとえば、センサーが反応するまで運転し、その後停止または方向転換する"
"ようにできます。"

#: of pybricks.robotics.DriveBase.drive:1
msgid ""
"Starts driving at the specified speed and turn rate. Both values are "
"measured at the center point between the wheels of the robot."
msgstr ""
"指定された速度と回転数で走行を開始します。"
"どちらの値も、ロボットの車輪の間の中心点で計測されます。"

#: of pybricks.robotics.DriveBase.drive:4
msgid "Speed of the robot."
msgstr "ロボットの速度。"

#: of pybricks.robotics.DriveBase.stop:1
msgid "Stops the robot by letting the motors spin freely."
msgstr "モーターの動作を止め、惰性でロボットが停止するにまかせます。"

#: ../../robotics.rst:43
msgid "Measuring"
msgstr "計測"

#: of pybricks.robotics.DriveBase.distance:1
msgid "Gets the estimated driven distance."
msgstr "推定走行距離を取得します。"

#: of pybricks.robotics.DriveBase.distance:3
msgid "Driven distance since last reset."
msgstr "前回リセットしてからの走行距離。"

#: of pybricks.robotics.DriveBase.angle:1
msgid "Gets the estimated rotation angle of the drive base."
msgstr "駆動基部の推定回転角度を取得します。"

#: of pybricks.robotics.DriveBase.angle:3
msgid "Accumulated angle since last reset."
msgstr "前回のリセットからの累積角度。"

#: of pybricks.robotics.DriveBase.state:1
msgid "Gets the state of the robot."
msgstr "ロボットの状態を取得します。"

#: of pybricks.robotics.DriveBase.state:3
msgid "Tuple of distance, drive speed, angle, and turn rate of the robot."
msgstr "ロボットの距離、駆動速度、角度、旋回速度のタプル。"

#: of pybricks.robotics.DriveBase.reset:1
msgid "Resets the estimated driven distance and angle to 0."
msgstr "推定駆動距離と推定駆動角度を 0 にリセットします。"

#: of pybricks.robotics.DriveBase.stalled:1
msgid "Checks if the drive base is currently stalled."
msgstr "ドライブベースが現在失速しているかどうかをチェックします。"

#: of pybricks.robotics.DriveBase.stalled:3
msgid ""
"It is stalled when it cannot reach the target speed or position, even "
"with the maximum actuation signal."
msgstr ""
"最大限の動作量を与えても、目標速度や位置に到達できない場合に失速しているとみなされます。"

#: of pybricks.robotics.DriveBase.stalled:6
msgid "``True`` if the drivebase is stalled, ``False`` if not."
msgstr "ドライブベースが失速していれば ``True`` 、失速していなければ ``False`` 。"

#: ../../robotics.rst:57
msgid "Driving with the gyro"
msgstr "ジャイロセンサーの利用"

#: of pybricks.robotics.DriveBase.use_gyro:1
msgid ""
"Choose ``True`` to use the gyro sensor for turning and driving straight. "
"Choose ``False`` to rely only on the motor's built-in rotation sensors."
msgstr ""
"旋回と前進駆動にジャイロセンサーを使う場合は ``True`` を指定します。"
"モーター内蔵の回転センサーに依存する場合は ``False`` を指定します。

#: of pybricks.robotics.DriveBase.use_gyro:5
msgid "``True`` to enable, ``False`` to disable."
msgstr "有効にするには ``True`` 、無効にするには ``False`` 。"

#: ../../robotics.rst:60
msgid ""
"If your hub is not mounted flat in your robot, make sure to specify the "
"``top_side`` and ``front_side`` parameters when you initialize the "
":class:`PrimeHub() <pybricks.hubs.PrimeHub>`, :class:`InventorHub() "
"<pybricks.hubs.PrimeHub>`, :class:`EssentialHub() "
"<pybricks.hubs.EssentialHub>`, or :class:`TechnicHub() "
"<pybricks.hubs.TechnicHub>`. This way your robot knows which rotation to "
"measure when turning."
msgstr ""
"ハブがロボットに平らに取り付けられていない場合、 "
":class:`PrimeHub() <pybricks.hubs.PrimeHub>`, :class:`InventorHub() "
"<pybricks.hubs.PrimeHub>`, :class:`EssentialHub() "
"<pybricks.hubs.EssentialHub>`, :class:`TechnicHub() "
"<pybricks.hubs.TechnicHub>` "
"を初期化する際に、必ず "``top_side`` と ``front_side`` のパラメータを"
"指定してください。こうすることで、ロボットが旋回するときにどの回転を測定すれば"
"よいかがわかります。"

#: ../../robotics.rst:68
msgid ""
"The gyro in each hub is a bit different, which can cause it to be a few "
"degrees off for big turns, or many small turns in the same direction. For"
" example, you may need to use :meth:`turn(357) "
"<pybricks.robotics.DriveBase.turn>` or :meth:`turn(362) "
"<pybricks.robotics.DriveBase.turn>` on your robot to make a full turn."
msgstr ""
"各ハブのジャイロは多少異なるため、大きく旋回する場合や同じ方向に何度も小さく旋回する場合には"
"数度ずれることがあります。たとえば、ロボットがフルに360°旋回させるには、 "
":meth:`turn(357) <pybricks.robotics.DriveBase.turn>` や :meth:`turn(362) "
"<pybricks.robotics.DriveBase.turn>` などとする必要があるかもしれません。"

#: ../../robotics.rst:75
msgid ""
"By default, this class tries to maintain the robot's position after a "
"move completes. This means the wheels will spin if you pick the robot up,"
" in an effort to maintain its heading angle. To avoid this, you can "
"choose ``then=Stop.COAST`` in your last :meth:`straight "
"<pybricks.robotics.DriveBase.straight>`, :meth:`turn "
"<pybricks.robotics.DriveBase.turn>`, or :meth:`curve "
"<pybricks.robotics.DriveBase.curve>` command."
msgstr ""
"デフォルトで、このクラスは移動が完了した後、ロボットの位置を維持しようとします。"
"つまり、ロボットを持ち上げると、その方位角を維持するために車輪が回転することになります。"
"これを避けるには、最後の "
":meth:`straight <pybricks.robotics.DriveBase.straight>`, :meth:`turn "
"<pybricks.robotics.DriveBase.turn>`, :meth:`curve "
"<pybricks.robotics.DriveBase.curve>` "
"コマンドで ``then=Stop.COAST`` を指定します。"

#: ../../robotics.rst:86
msgid "Measuring and validating the robot dimensions"
msgstr "ロボットの寸法の計測と検証"

#: ../../robotics.rst:87
msgid ""
"As a first estimate, you can measure the ``wheel_diameter`` and the "
"``axle_track`` with a ruler. Because it is hard to see where the wheels "
"effectively touch the ground, you can estimate the ``axle_track`` as the "
"distance between the midpoint of the wheels."
msgstr ""
"最初の見積りとして、定規を使って ``wheel_diameter`` (車輪の直径)と"
"``axle_track`` (車輪間の距離)を計測できます。"
"車輪が効果的に地面に接している箇所を確認するのは難しいので、"
"車輪の中点間の距離として ``axle_track`` を推定できます。"

#: ../../robotics.rst:92
msgid ""
"If you don't have a ruler, you can use a LEGO beam to measure. The "
"center-to-center distance of the holes is 8 mm. For some tyres, the "
"diameter is printed on the side. For example, 62.4 x 20 means that the "
"diameter is 62.4mm and that the width is 20 mm."
msgstr ""
"定規がない場合は、レゴのビームを使って計測できます。"
"穴の中心から中心までの距離は8mmです。"
"タイヤによっては、側面に直径が印刷されているものもあります。"
"たとえば、62.4 × 20 と印刷されていれば、直径が 62.4mm で、"
"幅が 20mm であることを意味します。"

#: ../../robotics.rst:97
msgid ""
"In practice, most wheels compress slightly under the weight of your "
"robot. To verify, make your robot drive 1000 mm using "
"``my_robot.straight(1000)`` and measure how far it really traveled. "
"Compensate as follows:"
msgstr ""
"実際のところ、ほとんどの車輪はロボットの重量でわずかに圧縮されます。"
"そこで、 ``my_robot.straight(1000)`` を使ってロボットを "
"1000mm 走行させ、実際にどの程度走行したかを計測してみましょう。"
"以下のように補正してください:"

#: ../../robotics.rst:101
msgid ""
"If your robot drives **not far enough**, **decrease** the "
"``wheel_diameter`` value slightly."
msgstr ""
"ロボットの走行距離が **足りない** 場合は、 ``wheel_diameter`` の"
"値を少し **小さく** してください。"

#: ../../robotics.rst:103
msgid ""
"If your robot drives **too far**, **increase** the ``wheel_diameter`` "
"value slightly."
msgstr ""
"ロボットの走行距離が **長すぎる** 場合は、 ``wheel_diameter`` の"
"値を少し **大きく** してください。"

#: ../../robotics.rst:106
msgid ""
"Motor shafts and axles bend slightly under the load of the robot, causing"
" the ground contact point of the wheels to be closer to the midpoint of "
"your robot. To verify, make your robot turn 360 degrees using "
"``my_robot.turn(360)`` and check that it is back in the same place:"
msgstr ""
"モーターシャフトと車軸はロボットの負荷でわずかに曲がり、車輪の接地点がロボット"
"の中央寄りになります。確認するには、 ``my_robot.turn(360)`` を使って"
"ロボットを360度回転させ、同じ場所に戻ってくるかどうかをチェックしてください:"

#: ../../robotics.rst:111
msgid ""
"If your robot turns **not far enough**, **increase** the ``axle_track`` "
"value slightly."
msgstr ""
"ロボットの旋回が **十分でない** 場合は、 ``axl_track`` の値を少し **大きく** "
"してください。"

#: ../../robotics.rst:113
msgid ""
"If your robot turns **too far**, **decrease** the ``axle_track`` value "
"slightly."
msgstr ""
"ロボットが曲がり **すぎる** 場合は、 ``axl_track`` の値を少し **小さく** します。"

#: ../../robotics.rst:116
msgid ""
"When making these adjustments, always adjust the ``wheel_diameter`` "
"first, as done above. Be sure to test both turning and driving straight "
"after you are done."
msgstr ""
"これらの調整を行う際は、上記のように必ず ``wheel_diameter`` を先に調整します。"
"調整が終わったら、旋回と直進の両方を必ずテストしてください。"

#: ../../robotics.rst:121
msgid "Using the DriveBase motors individually"
msgstr "DriveBase のモーターを個別に使う"

#: ../../robotics.rst:122
msgid ""
"After creating a :class:`.DriveBase` object, you can still use its two "
"motors individually. If you start one motor, the other motor will "
"automatically stop. Likewise, if a motor is already running and you make "
"the drive base move, the original maneuver is cancelled and the drive "
"base will take over."
msgstr ""
":class:`.DriveBase` オブジェクトを作成した後でも、その2つのモーターを個別に使えます。"
"片方のモーターを起動すると、もう片方のモーターは自動的に停止します。"
"同様に、モータが既に動いている状態でドライブベースを動かすと、元の操作が"
"キャンセルされ、ディードライブベースが引き継ぎます。"

#: ../../robotics.rst:129
msgid "Advanced settings"
msgstr "高度な設定"

#: ../../robotics.rst:130
msgid ""
"The :meth:`.settings` method is used to adjust commonly used settings "
"like the default speed and acceleration for straight maneuvers and turns."
" Use the following attributes to adjust more advanced control settings."
msgstr ""
":meth:`.settings` メソッドは、直進や旋回時のデフォルトの速度や加速度など、"
"よく使われる設定を調整するために使います。より高度な制御設定を調整するには、"
"次の属性を使います。"

#: ../../../docstring of pybricks.robotics.DriveBase.distance_control:1
msgid ""
"The traveled distance and drive speed are controlled by a PID controller."
" You can use this attribute to change its settings. See the :ref:`motor "
"control <settings>` attribute for an overview of available methods. The "
"``distance_control`` attribute has the same functionality, but the "
"settings apply to every millimeter driven by the drive base, instead of "
"degrees turned by one motor."
msgstr ""
"走行距離と駆動速度は、PIDコントローラによって制御されます。"
"この属性を使って、その設定を変更できます。利用可能なメソッドの概要については、 "
":ref:`motor control <settings>` 属性を参照してください。 "
"``distance_control`` 属性は同じ機能を持ちますが、設定は１つのモーターで回転する"
"度数ではなく、ドライブベースで駆動する全てのミリメートルに対して適用されます。"

#: ../../../docstring of pybricks.robotics.DriveBase.heading_control:1
msgid ""
"The robot turn angle and turn rate are controlled by a PID controller. "
"You can use this attribute to change its settings. See the :ref:`motor "
"control <settings>` attribute for an overview of available methods. The "
"``heading_control`` attribute has the same functionality, but the "
"settings apply to every degree of rotation of the whole drive base "
"(viewed from the top) instead of degrees turned by one motor."
msgstr ""
"ロボットの旋回角度と旋回速度は、PIDコントローラによって制御されます。"
"この属性を使ってその設定を変更できます。利用可能な方法の概要については、 "
":ref:`motor control <settings>` 属性を参照してください。 "
"``heading_control`` 属性は同じ機能を持ちますが、設定は1つのモーターが"
"回す度数ではなく、ドライブベース全体の(上から見た)回転の度数に対して適用されます。"

#: ../../robotics.rst:142
msgid "The :meth:`done` and :meth:`stalled` methods have been moved."
msgstr ":meth:`done` と :meth:`stalled` メソッドは移動しました。"

#: of pybricks.robotics.Car:1
msgid "A vehicle with one steering motor, and one or more motors for driving."
msgstr "一つの旋回モーターと、一つ以上の駆動モーターを備えた車両です。"

#: of pybricks.robotics.Car:3
#, python-format
msgid ""
"When you use this class, the steering motor will automatically find the "
"center position. This also determines which angle corresponds to 100% "
"steering."
msgstr ""
"このクラスを使うと、旋回モーターは自動的に中心位置を見つけます。"
"これによって、どの角度が100％の旋回に対応するかも決定されます。"

#: of pybricks.robotics.Car:7
msgid "The motor that steers the front wheels."
msgstr "前輪を旋回するモーター。"

#: of pybricks.robotics.Car:9
msgid "The motor that drives the wheels. Use a tuple for multiple motors."
msgstr "車輪を駆動するモーター。複数のモーターを使う場合はタプルで指定してください。"

#: ../../robotics.rst:188
msgid ".. image:: blockimg/pybricks_blockCarSteer.svg"
msgstr ""

#: of pybricks.robotics.Car.steer:1
#, python-format
msgid ""
"Steers the front wheels by a given amount. For 100% steering, it steers "
"right by the angle that was determined on initialization. For -100% "
"steering, it steers left and 0% means straight."
msgstr ""
"指定した量だけ前輪を旋回します。初期化時に決定された角度により、"
"100% では右に、-100% では左に旋回し、0% では直進します。"

#: of pybricks.robotics.Car.steer:5
msgid "Amount to steer the front wheels."
msgstr "前輪の旋回量。"

#: ../../robotics.rst:192
msgid ".. image:: blockimg/pybricks_blockCarDrive_car_drive_at_power.svg"
msgstr ""

#: of pybricks.robotics.Car.drive_power:1
msgid ""
"Drives the car at a given \"power\" level, as a percentage of the battery"
" voltage. Positive values drive forward, negative values drive backward."
msgstr ""
"\"power\" に指定したレベルで車を駆動します。"
"これはバッテリー電圧のパーセンテージです。正の値は前進、負の値は後進します。"

#: of pybricks.robotics.Car.drive_power:5
msgid ""
"For ``power`` values below 30%, the car will coast the wheels in order to"
" roll out smoothly instead of braking abruptly."
msgstr ""
"``power`` の値が 30% 未満の場合、急ブレーキではなく滑らかにロールアウトするために、"
"車輪を惰走させます。"

#: of pybricks.robotics.Car.drive_power:8
msgid ""
"This command is useful for remote control applications where you want "
"instant response to button presses or joystick movements."
msgstr ""
"この命令は、ボタン押下やジョイスティックの動きに即座に反応が必要な"
"リモートコントロールアプリケーションで役立ちます。"

#: of pybricks.robotics.Car.drive_power:11
msgid "Speed of the car."
msgstr "車両の速度。"

#: ../../robotics.rst:196
msgid ".. image:: blockimg/pybricks_blockCarDrive_car_drive_at_speed.svg"
msgstr ""

#: of pybricks.robotics.Car.drive_speed:1
msgid ""
"Drives the car at a given motor speed. Positive values drive forward, "
"negative values drive backward."
msgstr ""
"指定したモーター速度で車を駆動します。"
"正の値は前進、負の値は後進します。"

#: of pybricks.robotics.Car.drive_speed:4
msgid ""
"This command is useful for more precise driving with gentle acceleration "
"and deceleration. This automatically increases the power to maintain "
"speed as you drive across obstacles."
msgstr ""
"この命令は、緩やかな加速と減速でより精密な運転に役立ちます。"
"これにより、障害物を横切る際の速度維持のために自動的に電力を増加させます。"

#: of pybricks.robotics.Car.drive_speed:8
msgid "Angular velocity of the drive motors."
msgstr "駆動モーターの角速度。"

#: ../../robotics.rst:147
msgid "Examples"
msgstr "サンプルコード"

#: ../../robotics.rst:203
msgid "Driving straight and turning in place with a drive base"
msgstr "ドライブベースでの直進とその場での旋回"

#: ../../robotics.rst:205
msgid "This program shows the basics of driving and turning."
msgstr "このプログラムでは、基本の走行と旋回を使った例を示しています。"

#: ../../robotics.rst:207
msgid ""
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port, Direction\n"
"from pybricks.robotics import DriveBase\n"
"\n"
"# Initialize both motors. In this example, the motor on the\n"
"# left must turn counterclockwise to make the robot go forward.\n"
"left_motor = Motor(Port.A, Direction.COUNTERCLOCKWISE)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"# Initialize the drive base. In this example, the wheel diameter is 56mm."
"\n"
"# The distance between the two wheel-ground contact points is 112mm.\n"
"drive_base = DriveBase(left_motor, right_motor, wheel_diameter=56, "
"axle_track=112)\n"
"\n"
"# Optionally, uncomment the line below to use the gyro for improved "
"accuracy.\n"
"# drive_base.use_gyro(True)\n"
"\n"
"# Drive forward by 500mm (half a meter).\n"
"drive_base.straight(500)\n"
"\n"
"# Turn around clockwise by 180 degrees.\n"
"drive_base.turn(180)\n"
"\n"
"# Drive forward again to get back to the start.\n"
"drive_base.straight(500)\n"
"\n"
"# Turn around counterclockwise.\n"
"drive_base.turn(-180)\n"
msgstr ""
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port, Direction\n"
"from pybricks.robotics import DriveBase\n"
"\n"
"# 両方のモーターを初期化します。この例では、ロボットを前進させる\n"
"# ためには、左側のモータを反時計回りに回転させる必要があります。\n"
"left_motor = Motor(Port.A, Direction.COUNTERCLOCKWISE)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"# ドライブベースを初期化します。この例では、車輪の直径は 56mm です。\n"
"# ２つの車輪と地面の接触点間の距離は 112mm です。\n"
"drive_base = DriveBase(left_motor, right_motor, wheel_diameter=56, "
"axle_track=112)\n"
"\n"
"# 必要に応じて、精度向上のために次の行のコメントを外します。\n"
"# drive_base.use_gyro(True)\n"
"\n"
"# 500mm (0.5m)前進させる。\n"
"drive_base.straight(500)\n"
"\n"
"# 時計回りに旋回させる(180度)\n"
"drive_base.turn(180)\n"
"\n"
"# 元に戻るために再度前進する。\n"
"drive_base.straight(500)\n"
"\n"
"# 反時計回りに旋回させる。\n"
"drive_base.turn(-180)\n"

#: ../../robotics.rst:211
msgid "Remote controlling a car with front wheel steering"
msgstr "前輪で旋回する車両でのリモートコントロール"

#: ../../robotics.rst:213
msgid ""
"This program shows how you can drive a car with front wheel steering "
"using the :class:`remote control <pybricks.pupdevices.Remote>`."
msgstr ""
"このプログラムは、前輪で旋回する車両を "
":class:`リモートコントロール <pybricks.pupdevices.Remote>` "
"で運転する方法を示しています。"

#: ../../robotics.rst:216
msgid ""
"In this program, the ports match those of the `LEGO Technic 42099 Off-"
"Roader <https://pybricks.com/projects/sets/technic/42099-off-roader/>`_, "
"but you can use any other car with front wheel steering. If your vehicle "
"has only one drive motor, you can use a single motor instead of a tuple "
"of the motors used below."
msgstr ""
"このプログラムでは、 `LEGO Technic 42099 Off-Roader "
"<https://pybricks.com/projects/sets/technic/42099-off-roader/>`_ "
"のポートに合わせていますが、前輪で旋回の他の車でも使えます。"
"車両に1つの駆動モーターしかない場合、以下で使っている複数のモーターのタプルの"
"代わりに単一のモーターを指定できます。"

#: ../../robotics.rst:222
msgid ""
"from pybricks.parameters import Direction, Port, Button\n"
"from pybricks.pupdevices import Motor, Remote\n"
"from pybricks.robotics import Car\n"
"from pybricks.tools import wait\n"
"\n"
"# Set up motors.\n"
"front = Motor(Port.A, Direction.COUNTERCLOCKWISE)\n"
"rear = Motor(Port.B, Direction.COUNTERCLOCKWISE)\n"
"steer = Motor(Port.C, Direction.CLOCKWISE)\n"
"\n"
"# Connect to the remote.\n"
"remote = Remote()\n"
"\n"
"# Set up the car.\n"
"car = Car(steer, [front, rear])\n"
"\n"
"# The main program starts here.\n"
"while True:\n"
"    # Read remote state.\n"
"    pressed = remote.buttons.pressed()\n"
"\n"
"    # Steer using the left pad. Steering is the percentage\n"
"    # of the angle determined while initializing.\n"
"    steering = 0\n"
"    if Button.LEFT_PLUS in pressed:\n"
"        steering += 100\n"
"    elif Button.LEFT_MINUS in pressed:\n"
"        steering -= 100\n"
"    car.steer(steering)\n"
"\n"
"    # Drive using the right pad.\n"
"    power = 0\n"
"    if Button.RIGHT_PLUS in pressed:\n"
"        power += 100\n"
"    elif Button.RIGHT_MINUS in pressed:\n"
"        power -= 100\n"
"    car.drive_power(power)\n"
"\n"
"    # Wait briefly.\n"
"    wait(10)\n"
msgstr ""
"from pybricks.parameters import Direction, Port, Button\n"
"from pybricks.pupdevices import Motor, Remote\n"
"from pybricks.robotics import Car\n"
"from pybricks.tools import wait\n"
"\n"
"# モーターをセットアップ。\n"
"front = Motor(Port.A, Direction.COUNTERCLOCKWISE)\n"
"rear = Motor(Port.B, Direction.COUNTERCLOCKWISE)\n"
"steer = Motor(Port.C, Direction.CLOCKWISE)\n"
"\n"
"# リモート接続。\n"
"remote = Remote()\n"
"\n"
"# 車両をセットアップ。\n"
"car = Car(steer, [front, rear])\n"
"\n"
"# ここでメインプログラムをスタート。\n"
"while True:\n"
"    # リモート指示を読み取り。\n"
"    pressed = remote.buttons.pressed()\n"
"\n"
"    # 左パッドで旋回。旋回量は初期化時に決定された角度のパーセンテージ。\n"
"    steering = 0\n"
"    if Button.LEFT_PLUS in pressed:\n"
"        steering += 100\n"
"    elif Button.LEFT_MINUS in pressed:\n"
"        steering -= 100\n"
"    car.steer(steering)\n"
"\n"
"    # 右パッドで駆動。\n"
"    power = 0\n"
"    if Button.RIGHT_PLUS in pressed:\n"
"        power += 100\n"
"    elif Button.RIGHT_MINUS in pressed:\n"
"        power -= 100\n"
"    car.drive_power(power)\n"
"\n"
"    # 少し待機。\n"
"    wait(10)\n"

